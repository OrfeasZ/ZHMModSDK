#include "CodeGen.h"
#include "Logging.h"

#include <Glacier/ZString.h>
#include <Glacier/ZTypeRegistry.h>
#include <Glacier/Reflection.h>

#include "Globals.h"

#include <sstream>
#include <iostream>
#include <fstream>

void CodeGen::OnEngineInitialized()
{
	Generate();
}

void CodeGen::Generate()
{
	auto s_Registry = *Globals::TypeRegistry;

	m_PropertyNames.clear();

	Logger::Info("Generating code for types...");

	// Open our output files.
	m_ClassesFile.open("classes.txt", std::ofstream::out);
	m_EnumsFile.open("enums.txt", std::ofstream::out);
	
	m_SDKEnumsHeader.open("Enums.h", std::ofstream::out);

	m_ReflectiveClassesHeaderFile.open("ZHMGen.h", std::ofstream::out);
	m_ReflectiveClassesSourceFile.open("ZHMGen.cpp", std::ofstream::out);

	m_PropertyNamesHeaderFile.open("ZHMProperties.h", std::ofstream::out);
	m_PropertyNamesSourceFile.open("ZHMProperties.cpp", std::ofstream::out);

	m_EnumsHeaderFile.open("ZHMEnums.h", std::ofstream::out);
	m_EnumsSourceFile.open("ZHMEnums.cpp", std::ofstream::out);

	m_SDKEnumsHeader << "/*" << std::endl;
	m_SDKEnumsHeader << " * WARNING: This file is automatically generated. DO NOT MODIFY unless you know what you're doing." << std::endl;
	m_SDKEnumsHeader << " *" << std::endl;
	m_SDKEnumsHeader << " * If you wish to regenerate this file because of a game update use the ZHM Mod SDK CodeGen mod:" << std::endl;
	m_SDKEnumsHeader << " * https://github.com/OrfeasZ/ZHMModSDK" << std::endl;
	m_SDKEnumsHeader << " */" << std::endl;
	m_SDKEnumsHeader << std::endl;
	m_SDKEnumsHeader << "#pragma once" << std::endl;
	m_SDKEnumsHeader << std::endl;
	
	m_ReflectiveClassesHeaderFile << "/*" << std::endl;
	m_ReflectiveClassesHeaderFile << " * WARNING: This file is automatically generated. DO NOT MODIFY unless you know what you're doing." << std::endl;
	m_ReflectiveClassesHeaderFile << " *" << std::endl;
	m_ReflectiveClassesHeaderFile << " * If you wish to regenerate this file because of a game update use the ZHM Mod SDK CodeGen mod:" << std::endl;
	m_ReflectiveClassesHeaderFile << " * https://github.com/OrfeasZ/ZHMModSDK" << std::endl;
	m_ReflectiveClassesHeaderFile << " */" << std::endl;
	m_ReflectiveClassesHeaderFile << std::endl;
	m_ReflectiveClassesHeaderFile << "#pragma once" << std::endl;
	m_ReflectiveClassesHeaderFile << std::endl;
	m_ReflectiveClassesHeaderFile << "#include <ZHM/ZHMPrimitives.h>" << std::endl;
	m_ReflectiveClassesHeaderFile << "#include <ZHM/ZHMTypeInfo.h>" << std::endl;
	m_ReflectiveClassesHeaderFile << std::endl;

	m_ReflectiveClassesHeaderFile << "class ZHMTypeInfo;" << std::endl;
	m_ReflectiveClassesHeaderFile << std::endl;

	m_ReflectiveClassesSourceFile << "/*" << std::endl;
	m_ReflectiveClassesSourceFile << " * WARNING: This file is automatically generated. DO NOT MODIFY unless you know what you're doing." << std::endl;
	m_ReflectiveClassesSourceFile << " *" << std::endl;
	m_ReflectiveClassesSourceFile << " * If you wish to regenerate this file because of a game update use the ZHM Mod SDK CodeGen mod:" << std::endl;
	m_ReflectiveClassesSourceFile << " * https://github.com/OrfeasZ/ZHMModSDK" << std::endl;
	m_ReflectiveClassesSourceFile << " */" << std::endl;
	m_ReflectiveClassesSourceFile << std::endl;
	m_ReflectiveClassesSourceFile << "#include \"ZHMGen.h\"" << std::endl;
	m_ReflectiveClassesSourceFile << "#include \"ZHMProperties.h\"" << std::endl;
	m_ReflectiveClassesSourceFile << "#include \"ZHMEnums.h\"" << std::endl;
	m_ReflectiveClassesSourceFile << std::endl;

	for (auto& s_TypeDef : s_Registry->m_types)
	{
		auto s_Type = s_TypeDef.second;

		if (s_Type->typeInfo()->isEnum())
		{
			GenerateEnum(s_Type);
			GenerateReflectiveEnum(s_Type);
		}
	}

	for (auto& s_TypeDef : s_Registry->m_types)
	{
		auto s_Type = s_TypeDef.second;

		if (s_Type->typeInfo()->isClass())
		{
			GenerateClass(s_Type);

			if (!s_Type->typeInfo()->isEntity())
				GenerateReflectiveClass(s_Type);
		}
	}

	GenerateReflectiveClasses();
	GeneratePropertyNamesFiles();
	GenerateEnumsFiles();

	m_ClassesFile.close();
	m_EnumsFile.close();
	
	m_SDKEnumsHeader.close();

	m_ReflectiveClassesHeaderFile.close();
	m_ReflectiveClassesSourceFile.close();

	m_PropertyNamesHeaderFile.close();
	m_PropertyNamesSourceFile.close();

	Logger::Info("Finished generating code.");
}

void CodeGen::GenerateClass(STypeID* p_Type)
{
	auto s_Type = reinterpret_cast<IClassType*>(p_Type->typeInfo());

	std::ostringstream s_Stream;

	s_Stream << "// 0x" << std::hex << std::uppercase << p_Type << " (Size: 0x" << std::hex << std::uppercase << s_Type->m_nTypeSize << ")" << std::dec << std::endl;
	s_Stream << "class " << s_Type->m_pTypeName;

	if (s_Type->m_nBaseClassCount > 0 || s_Type->m_nInterfaceCount > 0)
		s_Stream << " :";

	s_Stream << std::endl;

	for (uint16_t i = 0; i < s_Type->m_nInterfaceCount; ++i)
	{
		if (!s_Type->m_pInterfaces[i].m_pType->typeInfo())
		{
			s_Stream << "// Unknown interface at offset 0x" << std::hex << s_Type->m_pInterfaces[i].m_nOffset << " " << std::dec << std::endl;
			continue;
		}

		s_Stream << "\tpublic " << s_Type->m_pInterfaces[i].m_pType->typeInfo()->m_pTypeName << ", // Offset 0x" << std::hex << s_Type->m_pInterfaces[i].m_nOffset << " " << std::dec << std::endl;
	}

	for (uint16_t i = 0; i < s_Type->m_nBaseClassCount; ++i)
	{
		if (!s_Type->m_pBaseClasses[i].m_pType->typeInfo())
		{
			s_Stream << "// Unknown base class at offset 0x" << std::hex << s_Type->m_pBaseClasses[i].m_nOffset << " " << std::dec << std::endl;
			continue;
		}

		s_Stream << "\tpublic " << s_Type->m_pBaseClasses[i].m_pType->typeInfo()->m_pTypeName << ", // Offset 0x" << std::hex << s_Type->m_pBaseClasses[i].m_nOffset << " " << std::dec << std::endl;
	}

	if (s_Type->m_nBaseClassCount > 0 || s_Type->m_nInterfaceCount > 0)
	{
		s_Stream.seekp(-2, s_Stream.cur);
		s_Stream << std::endl;
		s_Stream.flush();
	}

	s_Stream << "{" << std::endl;
	s_Stream << "public:" << std::endl;

	for (uint16_t i = 0; i < s_Type->m_nPropertyCount; ++i)
	{
		auto s_Prop = s_Type->m_pProperties[i];

		m_PropertyNames[s_Prop.m_nPropertyID] = s_Prop.m_pName;

		if (!s_Prop.m_pType->typeInfo())
		{
			uint64_t s_PropSize = 8;

			if (i < s_Type->m_nPropertyCount - 1)
				s_PropSize = s_Type->m_pProperties[i + 1].m_nOffset - s_Prop.m_nOffset;
			else
				s_PropSize = static_cast<uint64_t>(s_Type->m_nTypeSize) - s_Prop.m_nOffset;

			s_Stream << "\tchar " << s_Prop.m_pName << "[0x" << std::hex << std::uppercase << s_PropSize << std::dec << "];";

		}
		else
		{
			s_Stream << "\t" << s_Prop.m_pType->typeInfo()->m_pTypeName << " " << s_Prop.m_pName << ";";
		}

		s_Stream << " // 0x" << std::hex << std::uppercase << s_Prop.m_nOffset << std::dec << std::endl;
	}

	for (uint16_t i = 0; i < s_Type->m_nInputCount; ++i)
	{
		auto s_Input = s_Type->m_pInputs[i];

		ZString* p_Name;
		if (TryGetPinName(s_Input.m_nPinID, *p_Name))
		{
			s_Stream << "\tvoid " << p_Name->c_str() << " " << "();" << std::endl;
		}
		else
		{
			s_Stream << "\tvoid " << s_Input.m_nPinID << " " << "();" << std::endl;
		}
	}

	s_Stream << "};" << std::endl << std::endl;
	s_Stream.flush();

	// Write to file.
	m_ClassesFile << s_Stream.str();
}

std::vector<std::string> SplitString(const std::string& p_String, char p_Delimiter)
{
	std::vector<std::string> s_Parts;

	std::stringstream s_Stream(p_String);
	std::string s_Part;

	while (std::getline(s_Stream, s_Part, p_Delimiter))
		s_Parts.push_back(s_Part);

	return s_Parts;
}

std::string NormalizeName(STypeID* p_Type)
{
	std::string s_TypeName = p_Type->typeInfo()->m_pTypeName;

	if (s_TypeName == "TArray")
		return s_TypeName;

	if (p_Type->typeInfo()->isFixedArray())
	{
		auto s_ElementType = reinterpret_cast<IArrayType*>(p_Type->typeInfo())->m_pArrayElementType;
		return "TFixedArray<" + NormalizeName(s_ElementType) + ", " + std::to_string(reinterpret_cast<IArrayType*>(p_Type->typeInfo())->fixedArraySize()) + ">";
	}

	if (p_Type->typeInfo()->isArray())
	{
		auto s_ElementType = reinterpret_cast<IArrayType*>(p_Type->typeInfo())->m_pArrayElementType;
		return "TArray<" + NormalizeName(s_ElementType) + ">";
	}

	auto s_DotIndex = s_TypeName.find_first_of('.');

	while (s_DotIndex != std::string::npos)
	{
		s_TypeName[s_DotIndex] = '_';
		s_DotIndex = s_TypeName.find_first_of('.');
	}

	return s_TypeName;
}

void CodeGen::GenerateEnum(STypeID* p_Type)
{
	auto s_Type = reinterpret_cast<IEnumType*>(p_Type->typeInfo());

	std::unordered_map<int, std::string> s_Enum;

	//if (std::string(s_Type->m_pTypeName).find_first_of('.') != std::string::npos)
	//	return;

	{
		std::ostringstream s_Stream;

		s_Stream << "// 0x" << std::hex << std::uppercase << p_Type << " (Size: 0x" << std::hex << std::uppercase << s_Type->m_nTypeSize << ")" << std::dec << std::endl;
		s_Stream << "enum class " << s_Type->m_pTypeName << std::endl;
		s_Stream << "{" << std::endl;

		for (auto it = s_Type->m_entries.begin(); it != s_Type->m_entries.end(); ++it)
		{
			s_Enum[it->m_nValue] = it->m_pName;
			s_Stream << "\t" << it->m_pName << " = " << std::dec << it->m_nValue << "," << std::endl;
		}

		s_Stream << "};" << std::endl << std::endl;
		s_Stream.flush();

		// Write to file.
		m_EnumsFile << s_Stream.str();
	}
	
	{
		std::ostringstream s_Stream;

		s_Stream << "enum class " << NormalizeName(p_Type) << std::endl;
		s_Stream << "{" << std::endl;

		for (auto it = s_Type->m_entries.begin(); it != s_Type->m_entries.end(); ++it)
		{
			s_Enum[it->m_nValue] = it->m_pName;
			s_Stream << "\t" << it->m_pName << " = " << std::dec << it->m_nValue << "," << std::endl;
		}

		s_Stream << "};" << std::endl << std::endl;
		s_Stream.flush();

		// Write to file.
		m_SDKEnumsHeader << s_Stream.str();
	}

	m_Enums[s_Type->m_pTypeName] = s_Enum;
}

void GenerateArrayJsonWriter(STypeID* p_ElementType, std::ostream& p_Stream, const std::string& p_ValueName, int p_Depth = 0, const std::string& p_Indentation = "")
{
	p_Stream << p_Indentation << "\tp_Stream << \"[\";" << std::endl;

	p_Stream << p_Indentation << "\tfor (size_t i = 0; i < " << p_ValueName << ".size(); ++i)" << std::endl;
	p_Stream << p_Indentation << "\t{" << std::endl;
	p_Stream << p_Indentation << "\t\tauto& s_Item" << p_Depth << " = " << p_ValueName << "[i];" << std::endl;

	auto s_ArrayType = reinterpret_cast<IArrayType*>(p_ElementType->typeInfo());
	auto s_ArrayTypeName = std::string(s_ArrayType->m_pArrayElementType->typeInfo()->m_pTypeName);

	p_Stream << p_Indentation << "\t\tp_Stream << \"{\" << JsonStr(\"$type\") << \":\" << JsonStr(\"" << s_ArrayTypeName << "\") << \",\" << JsonStr(\"$val\") << \":\";" << std::endl;

	if (s_ArrayType->m_pArrayElementType->typeInfo()->isPrimitive())
	{
		if (s_ArrayTypeName == "uint8" || s_ArrayTypeName == "int8")
			p_Stream << p_Indentation << "\t\tp_Stream << static_cast<int>(s_Item" << p_Depth << ");" << std::endl;
		else
			p_Stream << p_Indentation << "\t\tp_Stream << s_Item" << p_Depth << ";" << std::endl;
	}
	else if (s_ArrayType->m_pArrayElementType->typeInfo()->isEnum())
	{
		p_Stream << p_Indentation << "\t\tp_Stream << \"{\" << JsonStr(\"$enumVal\") << \":\" << static_cast<int>(s_Item" << p_Depth << ") << \",\" << JsonStr(\"$enumValName\") << \":\" << JsonStr(ZHMEnums::GetEnumValueName(\"" << s_ArrayTypeName << "\", static_cast<int>(s_Item" << p_Depth << "))) << \"}\";" << std::endl;
	}
	else if (s_ArrayType->m_pArrayElementType->typeInfo()->m_pTypeName == std::string("ZString"))
	{
		p_Stream << p_Indentation << "\t\tp_Stream << JsonStr(s_Item" << p_Depth << ");" << std::endl;
	}
	else if (s_ArrayType->m_pArrayElementType->typeInfo()->isArray() || s_ArrayType->m_pArrayElementType->typeInfo()->isFixedArray())
	{
		GenerateArrayJsonWriter(s_ArrayType->m_pArrayElementType, p_Stream, "s_Item" + std::to_string(p_Depth), p_Depth + 1, p_Indentation + "\t");
	}
	else
	{
		p_Stream << p_Indentation << "\t\t" << s_ArrayType->m_pArrayElementType->typeInfo()->m_pTypeName << "::WriteJson(&s_Item" << p_Depth << ", p_Stream);" << std::endl;
	}

	p_Stream << p_Indentation << "\t\tp_Stream << \"}\";" << std::endl;
	p_Stream << std::endl;
	p_Stream << p_Indentation << "\t\tif (i < " << p_ValueName << ".size() - 1)" << std::endl;
	p_Stream << p_Indentation << "\t\t\tp_Stream << \",\";" << std::endl;

	p_Stream << p_Indentation << "\t}" << std::endl;

	p_Stream << p_Indentation << "\tp_Stream << \"]\";" << std::endl;
}

void GenerateArraySimpleJsonWriter(STypeID* p_ElementType, std::ostream& p_Stream, const std::string& p_ValueName, int p_Depth = 0, const std::string& p_Indentation = "")
{
	p_Stream << p_Indentation << "\tp_Stream << \"[\";" << std::endl;
	p_Stream << p_Indentation << "\tfor (size_t i = 0; i < " << p_ValueName << ".size(); ++i)" << std::endl;
	p_Stream << p_Indentation << "\t{" << std::endl;
	p_Stream << p_Indentation << "\t\tauto& s_Item" << p_Depth << " = " << p_ValueName << "[i];" << std::endl;

	auto s_ArrayType = reinterpret_cast<IArrayType*>(p_ElementType->typeInfo());
	auto s_ArrayTypeName = std::string(s_ArrayType->m_pArrayElementType->typeInfo()->m_pTypeName);

	if (s_ArrayType->m_pArrayElementType->typeInfo()->isPrimitive())
	{
		if (s_ArrayTypeName == "uint8" || s_ArrayTypeName == "int8")
			p_Stream << p_Indentation << "\t\tp_Stream << static_cast<int>(s_Item" << p_Depth << ");" << std::endl;
		else
			p_Stream << p_Indentation << "\t\tp_Stream << s_Item" << p_Depth << ";" << std::endl;
	}
	else if (s_ArrayType->m_pArrayElementType->typeInfo()->isEnum())
	{
		p_Stream << p_Indentation << "\t\tp_Stream << JsonStr(ZHMEnums::GetEnumValueName(\"" << s_ArrayTypeName << "\", static_cast<int>(s_Item" << p_Depth << ")));" << std::endl;
	}
	else if (s_ArrayType->m_pArrayElementType->typeInfo()->m_pTypeName == std::string("ZString"))
	{
		p_Stream << p_Indentation << "\t\tp_Stream << JsonStr(s_Item" << p_Depth << ");" << std::endl;
	}
	else if (s_ArrayType->m_pArrayElementType->typeInfo()->isArray() || s_ArrayType->m_pArrayElementType->typeInfo()->isFixedArray())
	{
		GenerateArraySimpleJsonWriter(s_ArrayType->m_pArrayElementType, p_Stream, "s_Item" + std::to_string(p_Depth), p_Depth + 1, p_Indentation + "\t");
	}
	else
	{
		p_Stream << p_Indentation << "\t\t" << s_ArrayType->m_pArrayElementType->typeInfo()->m_pTypeName << "::WriteSimpleJson(&s_Item" << p_Depth << ", p_Stream);" << std::endl;
	}

	p_Stream << std::endl;
	p_Stream << p_Indentation << "\t\tif (i < " << p_ValueName << ".size() - 1)" << std::endl;
	p_Stream << p_Indentation << "\t\t\tp_Stream << \",\";" << std::endl;

	p_Stream << p_Indentation << "\t}" << std::endl;
	p_Stream << std::endl;
	p_Stream << p_Indentation << "\tp_Stream << \"]\";" << std::endl;
}
void GenerateArraySimpleJsonReader(STypeID* p_ElementType, std::ostream& p_Stream, const std::string& p_ValueName, const std::string& p_ArrayName, int p_Depth = 0, const std::string& p_Indentation = "")
{
	auto s_ArrayType = reinterpret_cast<IArrayType*>(p_ElementType->typeInfo());
	auto s_ArrayTypeName = std::string(s_ArrayType->m_pArrayElementType->typeInfo()->m_pTypeName);
	auto s_NormalizedArrayType = NormalizeName(s_ArrayType->m_pArrayElementType);

	if (s_ArrayType->isFixedArray())
	{
		p_Stream << p_Indentation << "\tsize_t s_Index" << p_Depth << " = 0;" << std::endl;
		p_Stream << p_Indentation << "\tfor (simdjson::ondemand::value s_Item" << p_Depth << " : " << p_ArrayName << ")" << std::endl;
		p_Stream << p_Indentation << "\t{" << std::endl;

		if (s_ArrayType->m_pArrayElementType->typeInfo()->isPrimitive())
		{
			if (s_ArrayTypeName == "int8" || s_ArrayTypeName == "uint8" || s_ArrayTypeName == "int16" || s_ArrayTypeName == "uint16" || s_ArrayTypeName == "int32" || s_ArrayTypeName == "uint32")
				p_Stream << p_Indentation << "\t\t" << p_ValueName << "[s_Index" << p_Depth << "] = static_cast<" << s_ArrayTypeName << ">(int64_t(s_Item" << p_Depth << "));" << std::endl;
			else if (s_ArrayTypeName == "float32")
				p_Stream << p_Indentation << "\t\t" << p_ValueName << "[s_Index" << p_Depth << "] = static_cast<" << s_ArrayTypeName << ">(double(s_Item" << p_Depth << "));" << std::endl;
			else
				p_Stream << p_Indentation << "\t\t" << p_ValueName << "[s_Index" << p_Depth << "] = " << s_ArrayTypeName << "(s_Item" << p_Depth << ");" << std::endl;
		}
		else if (s_ArrayType->m_pArrayElementType->typeInfo()->isEnum())
		{
			p_Stream << p_Indentation << "\t\t" << p_ValueName << "[s_Index" << p_Depth << "] = static_cast<" << s_NormalizedArrayType << ">(ZHMEnums::GetEnumValueByName(\"" << s_ArrayTypeName << "\", std::string_view(s_Item" << p_Depth << ")));" << std::endl;
		}
		else if (s_ArrayType->m_pArrayElementType->typeInfo()->m_pTypeName == std::string("ZString"))
		{
			p_Stream << p_Indentation << "\t\t" << p_ValueName << "[s_Index" << p_Depth << "] = std::string_view(s_Item" << p_Depth << ");" << std::endl;
		}
		else if (s_ArrayType->m_pArrayElementType->typeInfo()->isArray() || s_ArrayType->m_pArrayElementType->typeInfo()->isFixedArray())
		{
			p_Stream << p_Indentation << "\t\t" << s_NormalizedArrayType << " s_ArrayItem" << p_Depth << ";" << std::endl;

			GenerateArraySimpleJsonReader(s_ArrayType->m_pArrayElementType, p_Stream, "s_ArrayItem" + std::to_string(p_Depth), "s_Item" + std::to_string(p_Depth), p_Depth + 1, p_Indentation + "\t");

			p_Stream << p_Indentation << "\t\t" << p_ValueName << "[s_Index" << p_Depth << "] = s_ArrayItem" << p_Depth << ";" << std::endl;
		}
		else
		{
			p_Stream << p_Indentation << "\t\t" << s_NormalizedArrayType << " s_ArrayItem" << p_Depth << ";" << std::endl;
			p_Stream << p_Indentation << "\t\t" << s_NormalizedArrayType << "::FromSimpleJson(s_Item" << p_Depth << ", &s_ArrayItem" << p_Depth << ");" << std::endl;
			p_Stream << p_Indentation << "\t\t" << p_ValueName << "[s_Index" << p_Depth << "] = s_ArrayItem" << p_Depth << ";" << std::endl;
		}

		p_Stream << p_Indentation << "\t\t++s_Index" << p_Depth << ";" << std::endl;

		p_Stream << p_Indentation << "\t}" << std::endl;
	}
	else
	{
		p_Stream << p_Indentation << "\tfor (simdjson::ondemand::value s_Item" << p_Depth << " : " << p_ArrayName << ")" << std::endl;
		p_Stream << p_Indentation << "\t{" << std::endl;

		if (s_ArrayType->m_pArrayElementType->typeInfo()->isPrimitive())
		{
			if (s_ArrayTypeName == "int8" || s_ArrayTypeName == "uint8" || s_ArrayTypeName == "int16" || s_ArrayTypeName == "uint16" || s_ArrayTypeName == "int32" || s_ArrayTypeName == "uint32")
				p_Stream << p_Indentation << "\t\t" << p_ValueName << ".push_back(static_cast<" << s_ArrayTypeName << ">(int64_t(s_Item" << p_Depth << ")));" << std::endl;
			else if (s_ArrayTypeName == "float32")
				p_Stream << "\t\t" << p_ValueName << ".push_back(static_cast<" << s_ArrayTypeName << ">(double(s_Item" << p_Depth << ")));" << std::endl;
			else
				p_Stream << p_Indentation << "\t\t" << p_ValueName << ".push_back(" << s_ArrayTypeName << "(s_Item" << p_Depth << "));" << std::endl;
		}
		else if (s_ArrayType->m_pArrayElementType->typeInfo()->isEnum())
		{
			p_Stream << p_Indentation << "\t\t" << p_ValueName << ".push_back(static_cast<" << s_NormalizedArrayType << ">(ZHMEnums::GetEnumValueByName(\"" << s_ArrayTypeName << "\", std::string_view(s_Item" << p_Depth << "))));" << std::endl;
		}
		else if (s_ArrayType->m_pArrayElementType->typeInfo()->m_pTypeName == std::string("ZString"))
		{
			p_Stream << p_Indentation << "\t\t" << p_ValueName << ".push_back(std::string_view(s_Item" << p_Depth << "));" << std::endl;
		}
		else if (s_ArrayType->m_pArrayElementType->typeInfo()->isArray() || s_ArrayType->m_pArrayElementType->typeInfo()->isFixedArray())
		{
			p_Stream << p_Indentation << "\t\t" << s_NormalizedArrayType << " s_ArrayItem" << p_Depth << ";" << std::endl;

			GenerateArraySimpleJsonReader(s_ArrayType->m_pArrayElementType, p_Stream, "s_ArrayItem" + std::to_string(p_Depth), "s_Item" + std::to_string(p_Depth), p_Depth + 1, p_Indentation + "\t");

			p_Stream << p_Indentation << "\t\t" << p_ValueName << ".push_back(s_ArrayItem" << p_Depth << ");" << std::endl;
		}
		else
		{
			p_Stream << p_Indentation << "\t\t" << s_NormalizedArrayType << " s_ArrayItem" << p_Depth << ";" << std::endl;
			p_Stream << p_Indentation << "\t\t" << s_NormalizedArrayType << "::FromSimpleJson(s_Item" << p_Depth << ", &s_ArrayItem" << p_Depth << ");" << std::endl;
			p_Stream << p_Indentation << "\t\t" << p_ValueName << ".push_back(s_ArrayItem" << p_Depth << ");" << std::endl;
		}

		p_Stream << p_Indentation << "\t}" << std::endl;
	}
}

void CodeGen::GenerateReflectiveClass(STypeID* p_Type)
{
	auto s_Type = reinterpret_cast<IClassType*>(p_Type->typeInfo());

	if (s_Type->m_nInterfaceCount > 0)
		return;

	// TODO: Maybe support inheritance in the future.
	if (s_Type->m_nBaseClassCount > 0)
		return;

	auto s_GenType = new GeneratedType();

	std::ostringstream s_HeaderStream;

	std::string s_Indent = "";
	bool s_IsNamespaced = false;

	std::string s_TypeName = s_Type->m_pTypeName;
	std::string s_NormalizedName = NormalizeName(p_Type);

	// We skip this since it uses map types that I don't feel like implementing and it doesn't
	// exist in game data anyway. Probably tool-only.
	if (s_TypeName == "SEntityPropertyDescriptor")
		return;

	/*if (s_LastDot != std::string::npos)
	{
		auto s_NamespaceParts = SplitString(s_TypeName.substr(0, s_LastDot), '.');

		s_TypeName = s_TypeName.substr(s_LastDot + 1);

		s_IsNamespaced = true;

		s_HeaderStream << "namespace ";

		for (auto i = 0; i < s_NamespaceParts.size(); ++i)
		{
			if (i > 0)
				s_HeaderStream << "::";

			s_HeaderStream << s_NamespaceParts[i];
		}

		s_HeaderStream << std::endl;
		s_HeaderStream << "{" << std::endl;

		s_Indent = "\t";
	}

	// TODO: Remove this once we support namespacing.
	if (s_IsNamespaced)
		return;*/

	if (s_TypeName.find_first_of('<') != std::string::npos)
		return;

	s_HeaderStream << s_Indent << "// 0x" << std::hex << std::uppercase << p_Type << " (Size: 0x" << std::hex << std::uppercase << s_Type->m_nTypeSize << ")" << std::dec << std::endl;
	s_HeaderStream << s_Indent << "class alignas(" << s_Type->m_nTypeAlignment << ") " << s_NormalizedName;

	if (s_Type->m_nBaseClassCount > 0)
		s_HeaderStream << " :";

	s_HeaderStream << std::endl;

	for (uint16_t i = 0; i < s_Type->m_nBaseClassCount; ++i)
	{
		if (!s_Type->m_pBaseClasses[i].m_pType->typeInfo())
		{
			printf("Unknown base class for %s.\n", s_TypeName.c_str());
			return;
		}

		// TODO: Remove this once we support namespacing.
		if (std::string(s_Type->m_pBaseClasses[i].m_pType->typeInfo()->m_pTypeName).find_first_of('.') != std::string::npos)
			return;

		s_GenType->Dependencies.insert(s_Type->m_pBaseClasses[i].m_pType->typeInfo()->m_pTypeName);

		s_HeaderStream << s_Indent << "\tpublic " << s_Type->m_pBaseClasses[i].m_pType->typeInfo()->m_pTypeName << "," << std::endl;
	}

	if (s_Type->m_nBaseClassCount > 0)
	{
		s_HeaderStream.seekp(-2, s_HeaderStream.cur);
		s_HeaderStream << std::endl;
		s_HeaderStream.flush();
	}

	s_HeaderStream << s_Indent << "{" << std::endl;
	s_HeaderStream << s_Indent << "public:" << std::endl;

	s_HeaderStream << s_Indent << "\tstatic ZHMTypeInfo TypeInfo;" << std::endl;
	s_HeaderStream << s_Indent << "\tstatic void WriteJson(void* p_Object, std::ostream& p_Stream);" << std::endl;
	s_HeaderStream << s_Indent << "\tstatic void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);" << std::endl;
	s_HeaderStream << s_Indent << "\tstatic void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);" << std::endl;
	s_HeaderStream << s_Indent << "\tstatic void Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset);" << std::endl;
	s_HeaderStream << std::endl;

	for (uint16_t i = 0; i < s_Type->m_nPropertyCount; ++i)
	{
		auto s_Prop = s_Type->m_pProperties[i];

		m_PropertyNames[s_Prop.m_nPropertyID] = s_Prop.m_pName;

		if (!s_Prop.m_pType->typeInfo())
		{
			printf("Could not get typeinfo for property in type %s.\n", s_TypeName.c_str());
			return;
		}
		else
		{
			// TODO: Remove this once we support namespacing.
			if (std::string(s_Prop.m_pType->typeInfo()->m_pTypeName).find_first_of('.') != std::string::npos && !s_Prop.m_pType->typeInfo()->isEnum())
				return;

			if (s_Prop.m_pType->typeInfo()->isArray() || s_Prop.m_pType->typeInfo()->isFixedArray())
			{
				if (s_Prop.m_pType->typeInfo()->m_pTypeName != std::string("TArray"))
				{
					auto s_ArrayType = reinterpret_cast<IArrayType*>(s_Prop.m_pType->typeInfo());

					if (ZString(s_ArrayType->m_pArrayElementType->typeInfo()->m_pTypeName).StartsWith("TPair<") ||
						ZString(s_ArrayType->m_pArrayElementType->typeInfo()->m_pTypeName).StartsWith("TMap<") ||
						ZString(s_ArrayType->m_pArrayElementType->typeInfo()->m_pTypeName).StartsWith("TMultiMap<"))
					{
						auto s_Parts1 = SplitString(s_ArrayType->m_pArrayElementType->typeInfo()->m_pTypeName, '<');
						auto s_Parts2 = SplitString(s_Parts1[1], ',');

						s_GenType->Dependencies.insert(s_Parts2[0]);
						s_GenType->Dependencies.insert(s_Parts2[1].substr(0, s_Parts2[1].size() - 1));
					}
					else if (ZString(s_ArrayType->m_pArrayElementType->typeInfo()->m_pTypeName).StartsWith("TArray<") ||
						ZString(s_ArrayType->m_pArrayElementType->typeInfo()->m_pTypeName).StartsWith("TFixedArray<"))
					{
						auto s_Parts = SplitString(s_ArrayType->m_pArrayElementType->typeInfo()->m_pTypeName, '<');
						s_GenType->Dependencies.insert(s_Parts[1].substr(0, s_Parts[1].size() - 1));
					}
					else
					{
						s_GenType->Dependencies.insert(s_ArrayType->m_pArrayElementType->typeInfo()->m_pTypeName);
					}
				}
			}
			else if (ZString(s_Prop.m_pType->typeInfo()->m_pTypeName).StartsWith("TPair<") ||
				ZString(s_Prop.m_pType->typeInfo()->m_pTypeName).StartsWith("TMap<") ||
				ZString(s_Prop.m_pType->typeInfo()->m_pTypeName).StartsWith("TMultiMap<"))
			{
				auto s_Parts1 = SplitString(s_Prop.m_pType->typeInfo()->m_pTypeName, '<');
				auto s_Parts2 = SplitString(s_Parts1[1], ',');

				s_GenType->Dependencies.insert(s_Parts2[0]);
				s_GenType->Dependencies.insert(s_Parts2[1].substr(0, s_Parts2[1].size() - 1));
			}
			else
			{
				s_GenType->Dependencies.insert(s_Prop.m_pType->typeInfo()->m_pTypeName);
			}

			std::string s_PropTypeName = s_Prop.m_pType->typeInfo()->m_pTypeName;

			s_HeaderStream << s_Indent << "\t" << NormalizeName(s_Prop.m_pType) << " " << s_Prop.m_pName << ";";
		}

		s_HeaderStream << " // 0x" << std::hex << std::uppercase << s_Prop.m_nOffset << std::dec << std::endl;
	}

	s_HeaderStream << s_Indent << "};" << std::endl;

	if (s_IsNamespaced)
	{
		s_HeaderStream << "}" << std::endl;
	}

	s_HeaderStream << std::endl;

	s_HeaderStream.flush();

	// Write to file.
	s_GenType->Header = s_HeaderStream.str();

	std::ostringstream s_SourceStream;

	s_SourceStream << "ZHMTypeInfo " << s_NormalizedName << "::TypeInfo = ZHMTypeInfo(\"" << s_TypeName << "\", sizeof(" << s_NormalizedName << "), alignof(" << s_NormalizedName << "), " << s_NormalizedName << "::WriteJson, " << s_NormalizedName << "::WriteSimpleJson, " << s_NormalizedName << "::FromSimpleJson, " << s_NormalizedName << "::Serialize);" << std::endl;
	s_SourceStream << std::endl;

	s_SourceStream << "void " << s_NormalizedName << "::WriteJson(void* p_Object, std::ostream& p_Stream)" << std::endl;
	s_SourceStream << "{" << std::endl;

	// TODO: Support for inherited classes.

	s_SourceStream << "\tauto* s_Object = reinterpret_cast<" << s_NormalizedName << "*>(p_Object);" << std::endl;
	s_SourceStream << std::endl;

	s_SourceStream << "\tp_Stream << \"{\";" << std::endl;

	for (uint16_t i = 0; i < s_Type->m_nPropertyCount; ++i)
	{
		auto s_Prop = s_Type->m_pProperties[i];
		auto s_PropTypeName = std::string(s_Prop.m_pType->typeInfo()->m_pTypeName);

		if (s_PropTypeName == std::string("TArray"))
			continue;

		// TODO: Add support for namespaced types.
		if (s_PropTypeName.find_first_of('.') != std::string::npos && !s_Prop.m_pType->typeInfo()->isEnum())
			return;

		s_SourceStream << "\tp_Stream << JsonStr(\"" << s_Prop.m_pName << "\") << \":\";" << std::endl;

		s_SourceStream << "\tp_Stream << \"{\" << JsonStr(\"$type\") << \":\" << JsonStr(\"" << s_PropTypeName << "\") << \",\" << JsonStr(\"$val\") << \":\";" << std::endl;

		if (s_Prop.m_pType->typeInfo()->isPrimitive())
		{
			if (s_PropTypeName == "uint8" || s_PropTypeName == "int8")
				s_SourceStream << "\tp_Stream << static_cast<int>(s_Object->" << s_Prop.m_pName << ");" << std::endl;
			else
				s_SourceStream << "\tp_Stream << s_Object->" << s_Prop.m_pName << ";" << std::endl;
		}
		else if (s_Prop.m_pType->typeInfo()->isEnum())
		{
			s_SourceStream << "\tp_Stream << \"{\" << JsonStr(\"$enumVal\") << \":\" << static_cast<int>(s_Object->" << s_Prop.m_pName << ") << \",\" << JsonStr(\"$enumValName\") << \":\" << JsonStr(ZHMEnums::GetEnumValueName(\"" << s_PropTypeName << "\", static_cast<int>(s_Object->" << s_Prop.m_pName << "))) << \"}\";" << std::endl;
		}
		else if (s_Prop.m_pType->typeInfo()->m_pTypeName == std::string("ZString"))
		{
			s_SourceStream << "\tp_Stream << JsonStr(s_Object->" << s_Prop.m_pName << ");" << std::endl;
		}
		else if (s_Prop.m_pType->typeInfo()->isArray() || s_Prop.m_pType->typeInfo()->isFixedArray())
		{
			GenerateArrayJsonWriter(s_Prop.m_pType, s_SourceStream, "s_Object->" + std::string(s_Prop.m_pName));
		}
		else
		{
			s_SourceStream << "\t" << s_PropTypeName << "::WriteJson(&s_Object->" << s_Prop.m_pName << ", p_Stream);" << std::endl;
		}

		s_SourceStream << "\tp_Stream << \"}\";" << std::endl;

		if (i < s_Type->m_nPropertyCount - 1)
		{
			s_SourceStream << "\tp_Stream << \",\";" << std::endl;
		}

		s_SourceStream << std::endl;
	}

	s_SourceStream << "\tp_Stream << \"}\";" << std::endl;
	s_SourceStream << "}" << std::endl;
	s_SourceStream << std::endl;

	s_SourceStream << "void " << s_NormalizedName << "::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)" << std::endl;
	s_SourceStream << "{" << std::endl;

	// TODO: Support for inherited classes.

	s_SourceStream << "\tauto* s_Object = reinterpret_cast<" << s_NormalizedName << "*>(p_Object);" << std::endl;
	s_SourceStream << std::endl;

	s_SourceStream << "\tp_Stream << \"{\";" << std::endl;
	s_SourceStream << std::endl;

	for (uint16_t i = 0; i < s_Type->m_nPropertyCount; ++i)
	{
		auto s_Prop = s_Type->m_pProperties[i];
		auto s_PropTypeName = std::string(s_Prop.m_pType->typeInfo()->m_pTypeName);

		if (s_PropTypeName == std::string("TArray"))
			continue;

		// TODO: Add support for namespaced types.
		if (s_PropTypeName.find_first_of('.') != std::string::npos && !s_Prop.m_pType->typeInfo()->isEnum())
			return;

		s_SourceStream << "\tp_Stream << JsonStr(\"" << s_Prop.m_pName << "\") << \":\";" << std::endl;

		if (s_Prop.m_pType->typeInfo()->isPrimitive())
		{
			if (s_Prop.m_pName == std::string("nPropertyID"))
			{
				s_SourceStream << "\t{" << std::endl;
				s_SourceStream << "\t\tauto s_PropertyName = ZHMProperties::PropertyToString(s_Object->" << s_Prop.m_pName << ");" << std::endl;
				s_SourceStream << std::endl;
				s_SourceStream << "\t\tif (s_PropertyName.size() == 0)" << std::endl;
				s_SourceStream << "\t\t\tp_Stream << s_Object->" << s_Prop.m_pName << ";" << std::endl;
				s_SourceStream << "\t\telse" << std::endl;
				s_SourceStream << "\t\t\tp_Stream << JsonStr(s_PropertyName);" << std::endl;
				s_SourceStream << "\t}" << std::endl;
			}
			else
			{
				if (s_PropTypeName == "uint8" || s_PropTypeName == "int8")
					s_SourceStream << "\tp_Stream << static_cast<int>(s_Object->" << s_Prop.m_pName << ");" << std::endl;
				else
					s_SourceStream << "\tp_Stream << s_Object->" << s_Prop.m_pName << ";" << std::endl;
			}
		}
		else if (s_Prop.m_pType->typeInfo()->isEnum())
		{
			s_SourceStream << "\tp_Stream << JsonStr(ZHMEnums::GetEnumValueName(\"" << s_PropTypeName << "\", static_cast<int>(s_Object->" << s_Prop.m_pName << ")));" << std::endl;
		}
		else if (s_Prop.m_pType->typeInfo()->m_pTypeName == std::string("ZString"))
		{
			s_SourceStream << "\tp_Stream << JsonStr(s_Object->" << s_Prop.m_pName << ");" << std::endl;
		}
		else if (s_Prop.m_pType->typeInfo()->isArray() || s_Prop.m_pType->typeInfo()->isFixedArray())
		{
			GenerateArraySimpleJsonWriter(s_Prop.m_pType, s_SourceStream, "s_Object->" + std::string(s_Prop.m_pName));
		}
		else
		{
			s_SourceStream << "\t" << s_PropTypeName << "::WriteSimpleJson(&s_Object->" << s_Prop.m_pName << ", p_Stream);" << std::endl;
		}

		if (i < s_Type->m_nPropertyCount - 1)
		{
			s_SourceStream << "\tp_Stream << \",\";" << std::endl;
		}

		s_SourceStream << std::endl;
	}

	s_SourceStream << "\tp_Stream << \"}\";" << std::endl;

	s_SourceStream << "}" << std::endl;
	s_SourceStream << std::endl;

	s_SourceStream << "void " << s_NormalizedName << "::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)" << std::endl;
	s_SourceStream << "{" << std::endl;

	// TODO: Support for inherited classes.

	s_SourceStream << "\t" << s_NormalizedName << " s_Object;" << std::endl;
	s_SourceStream << std::endl;

	for (uint16_t i = 0; i < s_Type->m_nPropertyCount; ++i)
	{
		auto s_Prop = s_Type->m_pProperties[i];
		auto s_PropTypeName = std::string(s_Prop.m_pType->typeInfo()->m_pTypeName);

		if (s_PropTypeName == std::string("TArray"))
			continue;

		// TODO: Add support for namespaced types.
		if (s_PropTypeName.find_first_of('.') != std::string::npos && !s_Prop.m_pType->typeInfo()->isEnum())
			return;

		if (s_Prop.m_pType->typeInfo()->isPrimitive())
		{
			if (s_Prop.m_pName == std::string("nPropertyID"))
			{
				s_SourceStream << "\tif (p_Document[\"" << s_Prop.m_pName << "\"].type() == simdjson::ondemand::json_type::string)" << std::endl;
				s_SourceStream << "\t\ts_Object." << s_Prop.m_pName << " = Hash::Crc32(std::string_view(p_Document[\"" << s_Prop.m_pName << "\"]));" << std::endl;
				s_SourceStream << "\telse" << std::endl;
				s_SourceStream << "\t\ts_Object." << s_Prop.m_pName << " = static_cast<uint32>(int64_t(p_Document[\"" << s_Prop.m_pName << "\"]));" << std::endl;
			}
			else
			{
				if (s_PropTypeName == "int8" || s_PropTypeName == "uint8" || s_PropTypeName == "int16" || s_PropTypeName == "uint16" || s_PropTypeName == "int32" || s_PropTypeName == "uint32")
					s_SourceStream << "\ts_Object." << s_Prop.m_pName << " = static_cast<" << s_PropTypeName << ">(int64_t(p_Document[\"" << s_Prop.m_pName << "\"]));" << std::endl;
				else if (s_PropTypeName == "float32")
					s_SourceStream << "\ts_Object." << s_Prop.m_pName << " = static_cast<" << s_PropTypeName << ">(double(p_Document[\"" << s_Prop.m_pName << "\"]));" << std::endl;
				else
					s_SourceStream << "\ts_Object." << s_Prop.m_pName << " = " << s_PropTypeName << "(p_Document[\"" << s_Prop.m_pName << "\"]);" << std::endl;
			}
		}
		else if (s_Prop.m_pType->typeInfo()->isEnum())
		{
			s_SourceStream << "\ts_Object." << s_Prop.m_pName << " = static_cast<" << NormalizeName(s_Prop.m_pType) << ">(ZHMEnums::GetEnumValueByName(\"" << s_PropTypeName << "\", std::string_view(p_Document[\"" << s_Prop.m_pName << "\"])));" << std::endl;
		}
		else if (s_Prop.m_pType->typeInfo()->m_pTypeName == std::string("ZString"))
		{
			s_SourceStream << "\ts_Object." << s_Prop.m_pName << " = std::string_view(p_Document[\"" << s_Prop.m_pName << "\"]);" << std::endl;
		}
		else if (s_Prop.m_pType->typeInfo()->isArray() || s_Prop.m_pType->typeInfo()->isFixedArray())
		{
			GenerateArraySimpleJsonReader(s_Prop.m_pType, s_SourceStream, "s_Object." + std::string(s_Prop.m_pName), "p_Document[\"" + std::string(s_Prop.m_pName) + "\"]");
		}
		else
		{
			s_SourceStream << "\t{" << std::endl;
			s_SourceStream << "\t\t" << s_PropTypeName << " s_Item;" << std::endl;
			s_SourceStream << "\t\t" << s_PropTypeName << "::FromSimpleJson(p_Document[\"" << s_Prop.m_pName << "\"], &s_Item);" << std::endl;
			s_SourceStream << "\t\ts_Object." << s_Prop.m_pName << " = s_Item;" << std::endl;
			s_SourceStream << "\t}" << std::endl;
		}

		s_SourceStream << std::endl;
	}

	s_SourceStream << "\t*reinterpret_cast<" << s_NormalizedName << "*>(p_Target) = s_Object;" << std::endl;

	s_SourceStream << "}" << std::endl;
	s_SourceStream << std::endl;

	s_SourceStream << "void " << s_NormalizedName << "::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)" << std::endl;
	s_SourceStream << "{" << std::endl;
	s_SourceStream << "\tauto* s_Object = reinterpret_cast<" << s_NormalizedName << "*>(p_Object);" << std::endl;
	s_SourceStream << std::endl;

	for (uint16_t i = 0; i < s_Type->m_nPropertyCount; ++i)
	{
		auto s_Prop = s_Type->m_pProperties[i];
		auto s_PropTypeName = std::string(s_Prop.m_pType->typeInfo()->m_pTypeName);

		if (s_PropTypeName == std::string("TArray"))
			continue;

		// TODO: Add support for namespaced types.
		if (s_PropTypeName.find_first_of('.') != std::string::npos && !s_Prop.m_pType->typeInfo()->isEnum())
			return;

		if (!s_Prop.m_pType->typeInfo()->isPrimitive() && !s_Prop.m_pType->typeInfo()->isEnum())
		{
			s_SourceStream << "\t" << NormalizeName(s_Prop.m_pType) << "::Serialize(&s_Object->" << s_Prop.m_pName << ", p_Serializer, p_OwnOffset + offsetof(" << s_NormalizedName << ", " << s_Prop.m_pName << "));" << std::endl;
		}
	}

	if (s_TypeName == "ZRuntimeResourceID")
		s_SourceStream << "\t" << "p_Serializer.RegisterRuntimeResourceId(p_OwnOffset);" << std::endl;

	s_SourceStream << "}" << std::endl;
	s_SourceStream << std::endl;

	s_SourceStream.flush();

	// Write to file.
	s_GenType->Source = s_SourceStream.str();

	s_GenType->TypeName = s_TypeName;

	m_ReflectiveClasses[s_TypeName] = s_GenType;
}

void CodeGen::GenerateReflectiveEnum(STypeID* p_Type)
{
	auto s_Type = reinterpret_cast<IEnumType*>(p_Type->typeInfo());

	std::string s_EnumTypeName = s_Type->m_pTypeName;

	std::ostringstream s_Stream;

	s_Stream << "// 0x" << std::hex << std::uppercase << p_Type << " (Size: 0x" << std::hex << std::uppercase << s_Type->m_nTypeSize << ")" << std::dec << std::endl;
	s_Stream << "enum class " << NormalizeName(p_Type) << std::endl;
	s_Stream << "{" << std::endl;

	for (auto it = s_Type->m_entries.begin(); it != s_Type->m_entries.end(); ++it)
		s_Stream << "\t" << it->m_pName << " = " << std::dec << it->m_nValue << "," << std::endl;

	s_Stream << "};" << std::endl << std::endl;
	s_Stream.flush();

	// Write to file.
	auto s_GenType = new GeneratedType();
	s_GenType->TypeName = s_Type->m_pTypeName;
	s_GenType->Header = s_Stream.str();

	m_ReflectiveClasses[s_Type->m_pTypeName] = s_GenType;
}

bool IsPrimitive(const std::string& p_TypeName)
{
	return p_TypeName == "int8" ||
		p_TypeName == "uint8" ||
		p_TypeName == "int16" ||
		p_TypeName == "uint16" ||
		p_TypeName == "int32" ||
		p_TypeName == "uint32" ||
		p_TypeName == "int64" ||
		p_TypeName == "uint64" ||
		p_TypeName == "float32" ||
		p_TypeName == "float64" ||
		p_TypeName == "bool" ||
		p_TypeName == "ZVariant" ||
		p_TypeName == "TypeID" ||
		p_TypeName == "ZRepositoryID" ||
		p_TypeName == "ZString";
}

void CodeGen::Visit(GeneratedType* p_Type, std::unordered_set<GeneratedType*>& p_Visited, std::vector<GeneratedType*>& p_Sorted)
{
	if (p_Visited.find(p_Type) == p_Visited.end())
	{
		p_Visited.insert(p_Type);

		for (auto& s_Dependency : p_Type->Dependencies)
		{
			auto it = m_ReflectiveClasses.find(s_Dependency);

			if (it != m_ReflectiveClasses.end())
			{
				if (it->second->ShouldSkip)
				{
					p_Type->ShouldSkip = true;
				}
				else
				{
					p_Type->ShouldSkip = false;
					Visit(it->second, p_Visited, p_Sorted);
				}
			}
			else if (IsPrimitive(s_Dependency))
			{
				p_Type->ShouldSkip = false;
			}
			else
			{
				// Could not find a dependency for this type. Skip.
				printf("Could not find dependency '%s' for type '%s'. Skipping.\n", s_Dependency.c_str(), p_Type->TypeName.c_str());
				p_Type->ShouldSkip = true;
			}

			if (p_Type->ShouldSkip)
				break;
		}

		p_Sorted.push_back(p_Type);
	}
	else if (std::find(p_Sorted.begin(), p_Sorted.end(), p_Type) == p_Sorted.end())
	{
		printf("Circular dependency uwu.\n");
	}
}

void CodeGen::GenerateReflectiveClasses()
{
	// We need to do a topological sort so everything is defined in dependent order.
	std::vector<GeneratedType*> s_Sorted;
	std::unordered_set<GeneratedType*> s_Visited;

	for (auto& s_Item : m_ReflectiveClasses)
	{
		Visit(s_Item.second, s_Visited, s_Sorted);
	}

	for (auto& s_Type : s_Sorted)
	{
		for (auto& s_Dependency : s_Type->Dependencies)
		{
			auto it = m_ReflectiveClasses.find(s_Dependency);

			if (it != m_ReflectiveClasses.end() && it->second->ShouldSkip)
			{
				s_Type->ShouldSkip = true;
				break;
			}
		}

		if (s_Type->ShouldSkip)
			continue;

		m_ReflectiveClassesHeaderFile << s_Type->Header;
		m_ReflectiveClassesSourceFile << s_Type->Source;
	}
}

void CodeGen::GeneratePropertyNamesFiles()
{
	m_PropertyNamesHeaderFile << "/*" << std::endl;
	m_PropertyNamesHeaderFile << " * WARNING: This file is automatically generated. DO NOT MODIFY unless you know what you're doing." << std::endl;
	m_PropertyNamesHeaderFile << " *" << std::endl;
	m_PropertyNamesHeaderFile << " * If you wish to regenerate this file because of a game update use the ZHM Mod SDK CodeGen mod:" << std::endl;
	m_PropertyNamesHeaderFile << " * https://github.com/OrfeasZ/ZHMModSDK" << std::endl;
	m_PropertyNamesHeaderFile << " */" << std::endl;
	m_PropertyNamesHeaderFile << std::endl;
	m_PropertyNamesHeaderFile << "#pragma once" << std::endl;
	m_PropertyNamesHeaderFile << std::endl;
	m_PropertyNamesHeaderFile << "#include <cstdint>" << std::endl;
	m_PropertyNamesHeaderFile << "#include <unordered_map>" << std::endl;
	m_PropertyNamesHeaderFile << "#include <string>" << std::endl;
	m_PropertyNamesHeaderFile << std::endl;
	m_PropertyNamesHeaderFile << "struct ZHMPropertyName;" << std::endl;
	m_PropertyNamesHeaderFile << std::endl;
	m_PropertyNamesHeaderFile << "class ZHMProperties" << std::endl;
	m_PropertyNamesHeaderFile << "{" << std::endl;
	m_PropertyNamesHeaderFile << "public:" << std::endl;
	m_PropertyNamesHeaderFile << "\tstatic std::string PropertyToString(uint32_t p_PropertyId);" << std::endl;
	m_PropertyNamesHeaderFile << "\tstatic std::unordered_map<uint32_t, ZHMPropertyName*>* g_Properties;" << std::endl;
	m_PropertyNamesHeaderFile << std::endl;
	m_PropertyNamesHeaderFile << "private:" << std::endl;

	m_PropertyNamesSourceFile << "/*" << std::endl;
	m_PropertyNamesSourceFile << " * WARNING: This file is automatically generated. DO NOT MODIFY unless you know what you're doing." << std::endl;
	m_PropertyNamesSourceFile << " *" << std::endl;
	m_PropertyNamesSourceFile << " * If you wish to regenerate this file because of a game update use the ZHM Mod SDK CodeGen mod:" << std::endl;
	m_PropertyNamesSourceFile << " * https://github.com/OrfeasZ/ZHMModSDK" << std::endl;
	m_PropertyNamesSourceFile << " */" << std::endl;
	m_PropertyNamesSourceFile << std::endl;
	m_PropertyNamesSourceFile << "#include \"ZHMProperties.h\"" << std::endl;
	m_PropertyNamesSourceFile << std::endl;
	m_PropertyNamesSourceFile << "std::unordered_map<uint32_t, ZHMPropertyName*>* ZHMProperties::g_Properties = nullptr;" << std::endl;
	m_PropertyNamesSourceFile << std::endl;
	m_PropertyNamesSourceFile << "std::string ZHMProperties::PropertyToString(uint32_t p_PropertyId)" << std::endl;
	m_PropertyNamesSourceFile << "{" << std::endl;
	m_PropertyNamesSourceFile << "\tauto it = g_Properties->find(p_PropertyId);" << std::endl;
	m_PropertyNamesSourceFile << std::endl;
	m_PropertyNamesSourceFile << "\tif (it == g_Properties->end())" << std::endl;
	m_PropertyNamesSourceFile << "\t\treturn \"\";" << std::endl;
	m_PropertyNamesSourceFile << std::endl;
	m_PropertyNamesSourceFile << "\treturn it->second->Name;" << std::endl;
	m_PropertyNamesSourceFile << "}" << std::endl;
	m_PropertyNamesSourceFile << std::endl;

	for (auto& s_Property : m_PropertyNames)
	{
		m_PropertyNamesHeaderFile << "\tstatic ZHMPropertyName g_Property_" << s_Property.second << ";" << std::endl;
		m_PropertyNamesSourceFile << "ZHMPropertyName ZHMProperties::g_Property_" << s_Property.second << " = ZHMPropertyName(\"" << s_Property.second << "\", " << s_Property.first << ");" << std::endl;
	}


	m_PropertyNamesHeaderFile << "};" << std::endl;
	m_PropertyNamesHeaderFile << std::endl;
	m_PropertyNamesHeaderFile << "struct ZHMPropertyName" << std::endl;
	m_PropertyNamesHeaderFile << "{" << std::endl;
	m_PropertyNamesHeaderFile << "\tZHMPropertyName(const char* p_Name, uint32_t p_Id) : Name(p_Name), Id(p_Id)" << std::endl;
	m_PropertyNamesHeaderFile << "\t{" << std::endl;
	m_PropertyNamesHeaderFile << "\t\tif (ZHMProperties::g_Properties == nullptr)" << std::endl;
	m_PropertyNamesHeaderFile << "\t\t\tZHMProperties::g_Properties = new std::unordered_map<uint32_t, ZHMPropertyName*>();" << std::endl;
	m_PropertyNamesHeaderFile << std::endl;
	m_PropertyNamesHeaderFile << "\t\t(*ZHMProperties::g_Properties)[p_Id] = this;" << std::endl;
	m_PropertyNamesHeaderFile << "\t}" << std::endl;
	m_PropertyNamesHeaderFile << std::endl;
	m_PropertyNamesHeaderFile << "\tstd::string Name;" << std::endl;
	m_PropertyNamesHeaderFile << "\tuint32_t Id;" << std::endl;
	m_PropertyNamesHeaderFile << "};" << std::endl;
	m_PropertyNamesHeaderFile << std::endl;
}

void CodeGen::GenerateEnumsFiles()
{
	m_EnumsHeaderFile << "/*" << std::endl;
	m_EnumsHeaderFile << " * WARNING: This file is automatically generated. DO NOT MODIFY unless you know what you're doing." << std::endl;
	m_EnumsHeaderFile << " *" << std::endl;
	m_EnumsHeaderFile << " * If you wish to regenerate this file because of a game update use the ZHM Mod SDK CodeGen mod:" << std::endl;
	m_EnumsHeaderFile << " * https://github.com/OrfeasZ/ZHMModSDK" << std::endl;
	m_EnumsHeaderFile << " */" << std::endl;
	m_EnumsHeaderFile << std::endl;
	m_EnumsHeaderFile << "#pragma once" << std::endl;
	m_EnumsHeaderFile << std::endl;
	m_EnumsHeaderFile << "#include <cstdint>" << std::endl;
	m_EnumsHeaderFile << "#include <unordered_map>" << std::endl;
	m_EnumsHeaderFile << "#include <string>" << std::endl;
	m_EnumsHeaderFile << std::endl;
	m_EnumsHeaderFile << "class ZHMEnums" << std::endl;
	m_EnumsHeaderFile << "{" << std::endl;
	m_EnumsHeaderFile << "private:" << std::endl;
	m_EnumsHeaderFile << "\tstruct EnumRegistrar { EnumRegistrar() { RegisterEnums(); } };" << std::endl;
	m_EnumsHeaderFile << "\tstatic std::unordered_map<std::string, std::unordered_map<int32_t, std::string>>* g_Enums;" << std::endl;
	m_EnumsHeaderFile << "\tstatic EnumRegistrar g_Registrar;" << std::endl;
	m_EnumsHeaderFile << "\tstatic void RegisterEnums();" << std::endl;
	m_EnumsHeaderFile << std::endl;
	m_EnumsHeaderFile << "public:" << std::endl;
	m_EnumsHeaderFile << "\tstatic std::string GetEnumValueName(const std::string& p_TypeName, int32_t p_Value);" << std::endl;
	m_EnumsHeaderFile << "\tstatic int32_t GetEnumValueByName(const std::string& p_TypeName, std::string_view p_Name);" << std::endl;
	m_EnumsHeaderFile << "\tstatic bool IsTypeNameEnum(const std::string& p_TypeName);" << std::endl;
	m_EnumsHeaderFile << "};" << std::endl;

	m_EnumsSourceFile << "/*" << std::endl;
	m_EnumsSourceFile << " * WARNING: This file is automatically generated. DO NOT MODIFY unless you know what you're doing." << std::endl;
	m_EnumsSourceFile << " *" << std::endl;
	m_EnumsSourceFile << " * If you wish to regenerate this file because of a game update use the ZHM Mod SDK CodeGen mod:" << std::endl;
	m_EnumsSourceFile << " * https://github.com/OrfeasZ/ZHMModSDK" << std::endl;
	m_EnumsSourceFile << " */" << std::endl;
	m_EnumsSourceFile << std::endl;
	m_EnumsSourceFile << "#include \"ZHMEnums.h\"" << std::endl;
	m_EnumsSourceFile << "#include <ZHM/ZHMTypeInfo.h>" << std::endl;
	m_EnumsSourceFile << std::endl;
	m_EnumsSourceFile << "std::unordered_map<std::string, std::unordered_map<int32_t, std::string>>* ZHMEnums::g_Enums = nullptr;" << std::endl;
	m_EnumsSourceFile << "ZHMEnums::EnumRegistrar ZHMEnums::g_Registrar;" << std::endl;
	m_EnumsSourceFile << std::endl;

	m_EnumsSourceFile << "std::string ZHMEnums::GetEnumValueName(const std::string& p_TypeName, int32_t p_Value)" << std::endl;
	m_EnumsSourceFile << "{" << std::endl;
	m_EnumsSourceFile << "\tauto s_EnumIt = g_Enums->find(p_TypeName);" << std::endl;
	m_EnumsSourceFile << std::endl;
	m_EnumsSourceFile << "\tif (s_EnumIt == g_Enums->end())" << std::endl;
	m_EnumsSourceFile << "\t\treturn \"\";" << std::endl;
	m_EnumsSourceFile << std::endl;
	m_EnumsSourceFile << "\tauto s_ValueIt = s_EnumIt->second.find(p_Value);" << std::endl;
	m_EnumsSourceFile << std::endl;
	m_EnumsSourceFile << "\tif (s_ValueIt == s_EnumIt->second.end())" << std::endl;
	m_EnumsSourceFile << "\t\treturn \"\";" << std::endl;
	m_EnumsSourceFile << std::endl;
	m_EnumsSourceFile << "\treturn s_ValueIt->second;" << std::endl;
	m_EnumsSourceFile << "}" << std::endl;
	m_EnumsSourceFile << std::endl;

	m_EnumsSourceFile << "int32_t ZHMEnums::GetEnumValueByName(const std::string& p_TypeName, std::string_view p_Name)" << std::endl;
	m_EnumsSourceFile << "{" << std::endl;
	m_EnumsSourceFile << "\tauto s_EnumIt = g_Enums->find(p_TypeName);" << std::endl;
	m_EnumsSourceFile << std::endl;
	m_EnumsSourceFile << "\tif (s_EnumIt == g_Enums->end())" << std::endl;
	m_EnumsSourceFile << "\t\treturn 0;" << std::endl;
	m_EnumsSourceFile << std::endl;
	m_EnumsSourceFile << "\tfor (auto s_Pair : s_EnumIt->second)" << std::endl;
	m_EnumsSourceFile << "\t\tif (s_Pair.second == p_Name)" << std::endl;
	m_EnumsSourceFile << "\t\t\treturn s_Pair.first;" << std::endl;
	m_EnumsSourceFile << std::endl;
	m_EnumsSourceFile << "\treturn 0;" << std::endl;
	m_EnumsSourceFile << "}" << std::endl;
	m_EnumsSourceFile << std::endl;

	m_EnumsSourceFile << "bool ZHMEnums::IsTypeNameEnum(const std::string& p_TypeName)" << std::endl;
	m_EnumsSourceFile << "{" << std::endl;
	m_EnumsSourceFile << "\treturn g_Enums->find(p_TypeName) != g_Enums->end();" << std::endl;
	m_EnumsSourceFile << "}" << std::endl;
	m_EnumsSourceFile << std::endl;

	m_EnumsSourceFile << "void ZHMEnums::RegisterEnums()" << std::endl;
	m_EnumsSourceFile << "{" << std::endl;
	m_EnumsSourceFile << "\tg_Enums = new std::unordered_map<std::string, std::unordered_map<int32_t, std::string>>();" << std::endl;
	m_EnumsSourceFile << std::endl;

	for (auto& s_Enum : m_Enums)
	{
		m_EnumsSourceFile << "\t(*g_Enums)[\"" << s_Enum.first << "\"] = {" << std::endl;

		for (auto& s_Value : s_Enum.second)
		{
			m_EnumsSourceFile << "\t\t{ " << std::to_string(s_Value.first) << ", \"" << s_Value.second << "\" }," << std::endl;
		}

		m_EnumsSourceFile << "\t};" << std::endl;
		m_EnumsSourceFile << std::endl;
	}

	m_EnumsSourceFile << "}" << std::endl;
	m_EnumsSourceFile << std::endl;
}


std::unordered_map<int32_t, ZString> g_PinRegistry
{
	{ 568878519, "AI_Info_Displayed" },
	{ -506102458, "Aborted" },
	{ 282990406, "Abs" },
	{ 1984411961, "Accident" },
	{ -420903384, "AccidentKill" },
	{ 707117500, "ActEvent4001" },
	{ -1288925178, "ActEvent4002" },
	{ -1003773808, "ActEvent4003" },
	{ 1515140403, "ActEvent4004" },
	{ 759694757, "ActEvent4005" },
	{ -1270787041, "ActEvent4006" },
	{ -1018796919, "ActEvent4007" },
	{ 1326475003, "Activate" },
	{ -1292013250, "Activated" },
	{ 1690786288, "ActivatedInputAction" },
	{ -1275873675, "ActivatedVoid" },
	{ -1471011051, "ActiveRegionChanged" },
	{ 912576881, "ActiveStage" },
	{ -2051769859, "Actor" },
	{ -2053706475, "ActorBeingDumped" },
	{ -1088258052, "ActorBeingPushed" },
	{ -628534001, "ActorBotherBody" },
	{ -1496143839, "ActorBotherHead" },
	{ 1563894, "ActorBotherIActor" },
	{ 2062966253, "ActorBotherPos" },
	{ -1435515932, "ActorEntered" },
	{ 1213618955, "ActorExited" },
	{ -1569288146, "ActorId" },
	{ -1827480325, "ActorKillBody" },
	{ -280419883, "ActorKillHead" },
	{ -459044272, "ActorKillIActor" },
	{ -2009537525, "ActorKillPos" },
	{ -867807090, "ActorName" },
	{ 274575217, "ActorPacifyBody" },
	{ 1812353631, "ActorPacifyHead" },
	{ -322741928, "ActorPacifyIActor" },
	{ 349088028, "ActorPacifyPos" },
	{ 1520008257, "ActorPosition" },
	{ 2012917919, "ActorSlapBody" },
	{ 195120561, "ActorSlapHead" },
	{ -1590235800, "ActorSlapIActor" },
	{ 1855687559, "ActorSlapPos" },
	{ 515602849, "ActorType" },
	{ -92920395, "AddedEntity" },
	{ -1576697549, "AddedKeyword" },
	{ -2142047192, "AddedSignal" },
	{ -522922342, "AddedToPhysicsWorld" },
	{ 2070210711, "AgilityEnter" },
	{ 520726377, "AgilityIsLanding" },
	{ 63625238, "AgilityIsMoving" },
	{ 1503963177, "AgilityLeave" },
	{ 1567456630, "AgilityStart" },
	{ 2055292938, "AgilityStop" },
	{ -267339999, "AimLookAt" },
	{ -700683835, "Alert" },
	{ 1273080814, "AlertHigh" },
	{ 1674391351, "AlertableActorOnScreen" },
	{ -232332836, "AlertableGuardOnScreen" },
	{ -625856522, "AllBodiesHidden" },
	{ -10159224, "AllPacifiedHidden" },
	{ 1380215166, "AllTargetsKilled" },
	{ -539270975, "AllTestsFinished" },
	{ 287381102, "Alpha" },
	{ -1934828716, "Ambient" },
	{ -29460971, "AmmoPickup" },
	{ 798120869, "AngleLookAt" },
	{ -1303585406, "AnimationPose" },
	{ 1556001108, "Any" },
	{ 1893567523, "Armed" },
	{ 713307401, "Arrest" },
	{ 1815403015, "AttackElbow" },
	{ -985146747, "AttackKick" },
	{ 1911178881, "AttackKnee" },
	{ 534919292, "AttentionMax" },
	{ 1096896415, "AttentionMaxPan" },
	{ -86883465, "AttentionOSDVisible" },
	{ -1456977994, "AttentionOff" },
	{ -1789387362, "AttentionOn" },
	{ 2041014083, "Attenuation" },
	{ -1294148096, "AudibleAttentionMax" },
	{ -707815481, "AudibleAttentionMaxPan" },
	{ 292280943, "AudioDone" },
	{ -648446021, "AxisValue" },
	{ 1763896352, "BackCarriesItem" },
	{ -315490537, "BackwardVector" },
	{ -1647496575, "Barrel" },
	{ 2134761969, "BeingFrisked" },
	{ -1555144145, "BlendInActivated" },
	{ 1903821738, "BlendInStart" },
	{ -1268703308, "BlendInStop" },
	{ -1962991728, "BloodPoolFound" },
	{ 185888315, "BodyBagPlaced" },
	{ -1878551637, "BodyDraggingSeen" },
	{ 1860519465, "BodyFall" },
	{ 455064232, "BodyFound" },
	{ 1851409203, "BodyFoundAccident" },
	{ -1402020903, "BodyFoundMurder" },
	{ -624635332, "BodyFoundPacify" },
	{ 831738673, "BodyFoundPacifyId" },
	{ -377649393, "BodyHidden" },
	{ -650145594, "BodyInContainer" },
	{ -1666588721, "BodyOverRail" },
	{ -1635729760, "Bodyshot" },
	{ -1752585046, "BoneBreak" },
	{ 1465110913, "BoneWeight" },
	{ 139393511, "BoxSize" },
	{ -803763413, "BreakWeaponOnTarget" },
	{ -836715060, "BulletFlyByHitman" },
	{ -699983294, "BundleDestroyed" },
	{ 5742987, "ButtonHoldComplete" },
	{ -1133515826, "ButtonHoldFraction" },
	{ -1593238588, "ButtonHoldStart" },
	{ -992282053, "ButtonHoldTerminated" },
	{ -802475407, "ButtonPressed" },
	{ 524274499, "CC_AttackWindow_End" },
	{ 177582941, "CC_AttackWindow_Start" },
	{ -55375540, "CC_Break_Neck_NPC" },
	{ 73173307, "CC_Choice" },
	{ 1942177871, "CC_End" },
	{ 1560298195, "CC_End_Escape" },
	{ 1826571955, "CC_End_Loose" },
	{ 1372148852, "CC_End_Win" },
	{ 1534882014, "CC_Failed" },
	{ -326007876, "CC_Fiber_Wire_Impact" },
	{ 1329099068, "CC_Final_Impact" },
	{ -2116129107, "CC_Impact_Counter" },
	{ -1878461629, "CC_Impact_Hitman" },
	{ -743660826, "CC_Impact_NPC" },
	{ 1671095440, "CC_Impact_NormalAttack" },
	{ 946268862, "CC_Miss" },
	{ -603469329, "CC_Miss_Take_Down" },
	{ -1069575058, "CC_PerfectAttackActivated" },
	{ -2046375193, "CC_PerfectAttackDeactivated" },
	{ -42667390, "CC_Prop_Kill_Back" },
	{ -503263315, "CC_SlowdownWindow_End" },
	{ -855288807, "CC_SlowdownWindow_Start" },
	{ 1692758668, "CC_Slowdown_Counter" },
	{ 650341732, "CC_Slowdown_Faction" },
	{ -724124110, "CC_Slowdown_Takedown" },
	{ -762232265, "CC_Start" },
	{ -120500516, "CC_Start_AttackChain" },
	{ 34204949, "CC_Start_Hitman" },
	{ -2094678967, "CC_Start_NPC" },
	{ 808929138, "CC_Strangle_Button" },
	{ -1100547987, "CC_Strangle_Fraction" },
	{ -1060162771, "CC_Success" },
	{ -1871263203, "CC_TakedownWindowHigh_Start" },
	{ 1240199351, "CC_TakedownWindowLow_Start" },
	{ 692388994, "CC_TakedownWindow_End" },
	{ 1127499902, "CC_Time_Multiplier" },
	{ 1808439326, "CPDoorOpen" },
	{ 1644468085, "CanNotOpenCPDoor" },
	{ 2063890788, "Cancelled" },
	{ 1332781181, "Car" },
	{ -469256161, "CaughtArmed" },
	{ 225062519, "ChallengeComplete" },
	{ 341488514, "ChallengePartiallyComplete" },
	{ -1666275037, "ChangeAmmo" },
	{ -866671170, "ChangeFrame" },
	{ 1817052262, "Changed" },
	{ -653677082, "ChangedDisguise" },
	{ 2010068019, "ChangedDisguiseClean" },
	{ -1678200931, "ChangedEntryValue" },
	{ -1028271776, "ChannelA" },
	{ 1539080410, "ChannelB" },
	{ -2112070682, "Checkpoint_NewStart" },
	{ -1015371412, "Checkpoint_Picklock_Fail" },
	{ -734471094, "Checkpoint_Picklock_Start" },
	{ -1390283106, "ChokeOutUsed" },
	{ -637245011, "CivilianGameTensionAlertedLow" },
	{ -66888597, "Clamped" },
	{ -59080782, "ClipEmpty" },
	{ -661915685, "CloseCalled" },
	{ 989278753, "CloseCombatEnded" },
	{ 57362642, "Closed" },
	{ -1050746610, "ClosestDistance" },
	{ -841255486, "ClosestTrackPoint" },
	{ -948588044, "ClosetPeekStart" },
	{ -570524533, "ClosetPeekStop" },
	{ -1752077672, "ClothBundleSpawned" },
	{ 1392066976, "ClothRustle" },
	{ -1150367653, "ClothStretch" },
	{ 1513232368, "ClothSwoosh" },
	{ -1483249683, "Color" },
	{ 1384014433, "ColorRGB" },
	{ -1963071826, "Combat" },
	{ -2049395358, "CombatHitmanHidden" },
	{ -1556250776, "CombatHitmanSpotted" },
	{ -1207312691, "Completed" },
	{ 1424890451, "Condition0" },
	{ 602483397, "Condition1" },
	{ -1159693441, "Condition2" },
	{ -840479767, "Condition3" },
	{ 1401151050, "Condition4" },
	{ 612691676, "Condition5" },
	{ -1114783898, "Condition6" },
	{ -896888848, "Condition7" },
	{ 1513460321, "Condition8" },
	{ 758293239, "Condition9" },
	{ 1562825685, "ContainedItem" },
	{ -563669641, "ContainedItemBreakOut" },
	{ -1827523941, "ContainedItemDestroyed" },
	{ 1097579739, "ContainedItemEjected" },
	{ 1306673225, "ContainerFull" },
	{ 803123667, "ContainsVictim" },
	{ 685215694, "ContextKillActor" },
	{ 1024268177, "ContextLink" },
	{ -359315319, "Continue" },
	{ 740363042, "ControllerHintClosed" },
	{ -2052038243, "ControllerHintOpened" },
	{ 1142451046, "Count" },
	{ -1696953393, "CounterEnded" },
	{ -1697650560, "CounterStarted" },
	{ -1588479283, "CountersUpdated" },
	{ -1303173227, "CoverDisabled" },
	{ -17155282, "CoverEnabled" },
	{ 1476479167, "CoverToCover" },
	{ -1535163882, "CoverUsed" },
	{ 1497540539, "CrippleBoxCanHolsterCurrentState" },
	{ -504659651, "CrippleBoxCanHolsterOnStateChanged" },
	{ 518928791, "CrossBackward" },
	{ -465848409, "CrossForward" },
	{ -1999675983, "CrowdActEnded" },
	{ -2018743330, "CrowdActPossessionFailed" },
	{ 1153685772, "CrowdActStarted" },
	{ 1481361782, "CrowdActorDeselected" },
	{ -1978753259, "CrowdActorDeselectedID" },
	{ -1759036093, "CrowdActorDied" },
	{ -1284021646, "CrowdActorSelected" },
	{ -1352217779, "CrowdActorSelectedID" },
	{ -1348423010, "CrowdActorSelectionFailed" },
	{ -285549042, "CrowdAlertFemaleRatio" },
	{ -1848883523, "CrowdAlertFemaleRatio_Back" },
	{ -2040176414, "CrowdAlertFemaleRatio_Left" },
	{ -1185210963, "CrowdAlertFemaleRatio_Right" },
	{ -628985965, "CrowdAlertMaleRatio" },
	{ -61061380, "CrowdAlertMaleRatio_Back" },
	{ -336240477, "CrowdAlertMaleRatio_Left" },
	{ -1192362837, "CrowdAlertMaleRatio_Right" },
	{ -798497675, "CrowdAlertNearestActor" },
	{ 878100344, "CrowdAlertNearestActor_Back" },
	{ 603953447, "CrowdAlertNearestActor_Left" },
	{ 1391505771, "CrowdAlertNearestActor_Right" },
	{ -571754013, "CrowdAlertRatio" },
	{ 251012638, "CrowdAlertRatio_Back" },
	{ 425656385, "CrowdAlertRatio_Left" },
	{ -165948001, "CrowdAlertRatio_Right" },
	{ 1968962682, "CrowdAmbientFemaleRatio" },
	{ -576060543, "CrowdAmbientFemaleRatio_Back" },
	{ -905763362, "CrowdAmbientFemaleRatio_Left" },
	{ -1770518673, "CrowdAmbientFemaleRatio_Right" },
	{ -2139287253, "CrowdAmbientMaleRatio" },
	{ -1446554699, "CrowdAmbientMaleRatio_Back" },
	{ -1100057110, "CrowdAmbientMaleRatio_Left" },
	{ -1212637558, "CrowdAmbientMaleRatio_Right" },
	{ -2020282254, "CrowdAmbientNearestActor" },
	{ 460694970, "CrowdAmbientNearestActor_Back" },
	{ 215778277, "CrowdAmbientNearestActor_Left" },
	{ 666186221, "CrowdAmbientNearestActor_Right" },
	{ -179502272, "CrowdAmbientRatio" },
	{ -887692578, "CrowdAmbientRatio_Back" },
	{ -591412095, "CrowdAmbientRatio_Left" },
	{ 1840969707, "CrowdAmbientRatio_Right" },
	{ -1775520393, "CrowdBotherBody" },
	{ -361740199, "CrowdBotherHead" },
	{ -1324975156, "CrowdBotherPos" },
	{ -1594045430, "CrowdCulledRatio" },
	{ -198483632, "CrowdCulledRatio_Back" },
	{ -478001393, "CrowdCulledRatio_Left" },
	{ 1736795215, "CrowdCulledRatio_Right" },
	{ 1398041051, "CrowdDensity1" },
	{ -755933144, "CrowdDensity1_Back" },
	{ -984070537, "CrowdDensity1_Left" },
	{ 964511552, "CrowdDensity1_Right" },
	{ -500227772, "CrowdDensityTotal" },
	{ -356242227, "CrowdDownFemaleRatio" },
	{ 1502545668, "CrowdDownFemaleRatio_Back" },
	{ 1311121755, "CrowdDownFemaleRatio_Left" },
	{ 187585988, "CrowdDownFemaleRatio_Right" },
	{ -605363106, "CrowdDownMaleRatio" },
	{ -2007043979, "CrowdDownMaleRatio_Back" },
	{ -1611147734, "CrowdDownMaleRatio_Left" },
	{ 754828697, "CrowdDownMaleRatio_Right" },
	{ -770815603, "CrowdDownNearestActor" },
	{ -2044463343, "CrowdDownNearestActor_Back" },
	{ -1853173426, "CrowdDownNearestActor_Left" },
	{ 1714167263, "CrowdDownNearestActor_Right" },
	{ 153055956, "CrowdDownRatio" },
	{ -350031720, "CrowdDownRatio_Back" },
	{ -57944377, "CrowdDownRatio_Left" },
	{ -232446116, "CrowdDownRatio_Right" },
	{ 42430795, "CrowdKillBody" },
	{ 2128383077, "CrowdKillHead" },
	{ 2046411589, "CrowdKillPos" },
	{ -1935361479, "CrowdScaredFemaleRatio" },
	{ 123750624, "CrowdScaredFemaleRatio_Back" },
	{ 281636543, "CrowdScaredFemaleRatio_Left" },
	{ -1407738646, "CrowdScaredFemaleRatio_Right" },
	{ 1894773892, "CrowdScaredMaleRatio" },
	{ 1346004955, "CrowdScaredMaleRatio_Back" },
	{ 1200832900, "CrowdScaredMaleRatio_Left" },
	{ 491466721, "CrowdScaredMaleRatio_Right" },
	{ 1756897054, "CrowdScaredNearestActor" },
	{ 555367999, "CrowdScaredNearestActor_Back" },
	{ 917706848, "CrowdScaredNearestActor_Left" },
	{ -1168299559, "CrowdScaredNearestActor_Right" },
	{ -1127989984, "CrowdScaredRatio" },
	{ -1919955390, "CrowdScaredRatio_Back" },
	{ -1708726243, "CrowdScaredRatio_Left" },
	{ -1807371864, "CrowdScaredRatio_Right" },
	{ -799826532, "CurrentAmbience" },
	{ 1338905183, "CurrentGait" },
	{ 1412363848, "CurrentHealth" },
	{ -613149757, "CurrentLocale" },
	{ -2093962150, "CurrentMapRotationZ" },
	{ -1785322451, "CurrentRegion" },
	{ 1843705076, "CurrentTextLocale" },
	{ 1643864777, "CutSequenceEnded" },
	{ 356773627, "CutSequenceStarted" },
	{ -1497880383, "DataEnd" },
	{ 975389649, "DataStart" },
	{ -1318334333, "Deactivate" },
	{ -320998522, "Deactivated" },
	{ 1293411866, "Dead" },
	{ -458839207, "DeadBodySeenAccident" },
	{ -2068219174, "DeadBodySeenMurder" },
	{ -507874564, "DeadBodySeenMurderId" },
	{ -426470935, "DeadlyThrowActivated" },
	{ 1640406207, "DeadlyThrowImpact" },
	{ 1891030449, "DeadlyThrowOff" },
	{ -577714569, "DeadlyThrowOn" },
	{ 646380074, "Death" },
	{ 1239111071, "DeathContext" },
	{ 567961179, "DeepTrespassing" },
	{ 753088835, "Default" },
	{ -1616614488, "Deselected" },
	{ 1962060764, "DetectedKill" },
	{ -912301622, "DetectedPacified" },
	{ -1145455599, "DialogOpened" },
	{ 543283834, "Died" },
	{ 1573485654, "DiffusePower" },
	{ -2131200819, "Disable" },
	{ 2106068149, "Disabled" },
	{ -1116585443, "DisarmedEnemy" },
	{ 2070772009, "Discharge_Shot" },
	{ -260429516, "Discharge_ShotCompletelySilenced" },
	{ -388105389, "Discharge_ShotSilenced" },
	{ 551274368, "Discharge_ShotSuperSilenced" },
	{ -1056929777, "DisguiseAttentionMax" },
	{ -1122519900, "DisguiseAttentionMaxPan" },
	{ -348666816, "DisguiseBeingInvestigated" },
	{ 314179056, "DisguiseBlendInActivated" },
	{ -1185561239, "DisguiseBlown" },
	{ 1707574743, "DisguiseBroken" },
	{ 1236667056, "DisguiseHealth" },
	{ 925476141, "DisguiseSuspicious" },
	{ -614291559, "DisguiseTaken" },
	{ -1134510055, "DisplayingObjectivesBarWithoutChanges" },
	{ -437978921, "Distance" },
	{ -954305844, "DistanceChanged" },
	{ -2108459676, "DistanceToAlertableActor" },
	{ 1765027921, "DistanceToAlertableGuard" },
	{ 1532297061, "DistanceToEngagedActor" },
	{ 2037073175, "DivideByZero" },
	{ -1340125291, "Done" },
	{ -772212179, "DoorBroken" },
	{ 1659962880, "DoorCancelLockpicking" },
	{ 1128938921, "DoorClose" },
	{ -1997098449, "DoorCloseByAny" },
	{ 425629881, "DoorCloseByHitmanFirst" },
	{ -329466639, "DoorCloseNoOperator" },
	{ 932453309, "DoorClosed" },
	{ 1578516374, "DoorHidePadlock" },
	{ -645816632, "DoorLocked" },
	{ -356658476, "DoorOpen" },
	{ -924408374, "DoorOpenByAny" },
	{ 1572932265, "DoorOpenByAnyIn" },
	{ -2021247034, "DoorOpenByAnyOut" },
	{ 724716334, "DoorOpenByHitmanFirst" },
	{ -2134327380, "DoorShowPadlock" },
	{ -164539140, "DoorStartLockpicking" },
	{ -394641512, "DoorUnlocked" },
	{ 1038040643, "Dot" },
	{ -1127399675, "Down" },
	{ 117742386, "DownToAmbient" },
	{ 2074838923, "DraggedBodyElevationChanged" },
	{ -2003012526, "DraggingDirChanged" },
	{ -1189861868, "DraggingStart" },
	{ -72451378, "DraggingStartMoving" },
	{ 219488646, "DraggingStop" },
	{ 1674256447, "DraggingStopMoving" },
	{ -1813427075, "DumpsterEndDumpingBody" },
	{ -1817898037, "DumpsterFull" },
	{ 14523148, "DumpsterStartDumpingBody" },
	{ 2133451414, "Duration" },
	{ -1392667734, "DynamicRangeModeHigh" },
	{ 48530779, "DynamicRangeModeLow" },
	{ -1690959454, "DynamicRangeModeMedium" },
	{ 737444799, "EjectCartridge" },
	{ -1802303860, "EjectCartridgeHitman" },
	{ -1269338067, "EjectCartridgeNPC" },
	{ -319493704, "EliminateSilentUsed" },
	{ -1405221831, "EliminateUsed" },
	{ -175506763, "Else" },
	{ -1685454249, "EmptyShot" },
	{ -200487676, "Enable" },
	{ 876426755, "EnablePickup" },
	{ -1622900200, "Enabled" },
	{ 213599210, "EndFire" },
	{ -2086941451, "EnemiesIsAlerted" },
	{ 763010601, "EnemiesIsAlertedArmed" },
	{ 470876117, "EnemiesIsEngaged" },
	{ 283673254, "EnemiesIsInCombat" },
	{ 1702818852, "EnterAimAt" },
	{ -501533549, "EnterCloset" },
	{ 841871514, "EnterCover" },
	{ -1221529608, "EnterLookAt" },
	{ 2133029193, "EnterPeeking" },
	{ 2099462537, "EnterPeekingDone" },
	{ -1598662432, "EnterSafeZoneAny" },
	{ 767749257, "EnterSniperMode" },
	{ 2014155688, "EnterVent" },
	{ -23863353, "EnvironmentKill" },
	{ -278250765, "Equal" },
	{ -334056610, "Equipped" },
	{ 1199302009, "EquippedBulletCount" },
	{ -959828560, "EquippedHasBullets" },
	{ -783088667, "EquippedIsFirearm" },
	{ -1624733959, "EquippedIsNotFirearm" },
	{ 1303120889, "EquippedIsOutOfBullets" },
	{ -745274665, "EventData" },
	{ 384083638, "EventOccurred" },
	{ 1920686262, "EventReceived" },
	{ 1198473998, "EventRegistered" },
	{ 4174937, "Executed" },
	{ 558719109, "ExecutedData" },
	{ 1587332160, "ExitAimAt" },
	{ -1459653662, "ExitCloset" },
	{ 164610302, "ExitCover" },
	{ -36394871, "ExitLookAt" },
	{ 1483461796, "ExitPeeking" },
	{ 456079233, "ExitPeekingDone" },
	{ -960876824, "ExitSafeZoneAny" },
	{ 663694931, "ExitSniperMode" },
	{ -199409784, "ExitVent" },
	{ -211360833, "Explosion" },
	{ 632274062, "ExplosionAtPos" },
	{ 155403932, "ExplosionDistance" },
	{ 1589487333, "ExplosionKill" },
	{ -1324515458, "FaceExpression" },
	{ -1256261497, "FadeHero" },
	{ -1725454783, "Failed" },
	{ -351066002, "Fiber_Wire_Kill" },
	{ -770161904, "Fiberwire" },
	{ 1863890672, "FiberwireKill" },
	{ -1232937292, "FilterOut" },
	{ 660991534, "Finish" },
	{ 1597622634, "Finished" },
	{ 1386177760, "Fired" },
	{ -1374258395, "FireworksBox" },
	{ -37494971, "FirstSMGShot" },
	{ 1594417462, "Fixed" },
	{ -50705461, "FloatCount" },
	{ 1683249053, "FloatValue" },
	{ 1378500269, "FocusAdded" },
	{ -1637335013, "FocusBecameEmpty" },
	{ -165392267, "FocusBecameFull" },
	{ -1288131943, "FocusBurnRate" },
	{ -246246526, "FocusEmpty" },
	{ 2088773795, "FocusFull" },
	{ 477273571, "FocusGainValue" },
	{ -915024457, "FocusGained" },
	{ -591759191, "FocusLost" },
	{ -2065500558, "FocusValue" },
	{ -1118864578, "ForwardSpawn_Enabled" },
	{ -1644061124, "ForwardSpawn_Restored" },
	{ -1919612564, "ForwardVector" },
	{ -577623905, "FoundCount" },
	{ -1503722376, "FoundNode" },
	{ -952146913, "FoundNothing" },
	{ 1244037837, "FoundSomething" },
	{ -728921708, "FriskFailed" },
	{ 1447651930, "FriskSuccess" },
	{ 466106320, "FuseBoxDisabled" },
	{ -1657209505, "FuseBoxDisabledFirstTime" },
	{ 1214886053, "FuseBoxFixed" },
	{ 1085555817, "GameTension" },
	{ -908919179, "GameTensionAgitated" },
	{ -1827032565, "GameTensionAlertedHigh" },
	{ 1405352445, "GameTensionAlertedLow" },
	{ 2014866673, "GameTensionAmbient" },
	{ 1250345247, "GameTensionArrest" },
	{ -753556020, "GameTensionCivilian" },
	{ -1326975249, "GameTensionCivilianHM" },
	{ 1092387038, "GameTensionCivilianHM_Agitated" },
	{ -1957381171, "GameTensionCivilianHM_AlertedHigh" },
	{ -1450358742, "GameTensionCivilianHM_AlertedLow" },
	{ -1103355607, "GameTensionCivilianHM_Ambient" },
	{ 1645390629, "GameTensionCivilianHM_Arrest" },
	{ -1033144190, "GameTensionCivilianHM_Combat" },
	{ 772161269, "GameTensionCivilianHM_Hunting" },
	{ -694054276, "GameTensionCivilianHM_Searching" },
	{ 1548262553, "GameTensionCivilian_Agitated" },
	{ 1961945125, "GameTensionCivilian_AlertedHigh" },
	{ 45404403, "GameTensionCivilian_AlertedLow" },
	{ 1563427385, "GameTensionCivilian_Ambient" },
	{ 221948333, "GameTensionCivilian_Arrest" },
	{ -1388086774, "GameTensionCivilian_Combat" },
	{ -854975003, "GameTensionCivilian_Hunting" },
	{ 1040454227, "GameTensionCivilian_Searching" },
	{ -352382280, "GameTensionCombat" },
	{ -1444146584, "GameTensionGuardHM" },
	{ 1651294570, "GameTensionGuardHM_Agitated" },
	{ -261823910, "GameTensionGuardHM_AlertedHigh" },
	{ 687829472, "GameTensionGuardHM_AlertedLow" },
	{ 387590878, "GameTensionGuardHM_Ambient" },
	{ -122220599, "GameTensionGuardHM_Arrest" },
	{ 1489951854, "GameTensionGuardHM_Combat" },
	{ -2027932414, "GameTensionGuardHM_Hunting" },
	{ 445552040, "GameTensionGuardHM_Searching" },
	{ -400395475, "GameTensionHunting" },
	{ -1758648734, "GameTensionSearching" },
	{ 758302041, "GameTensionSearchingHitmanClear" },
	{ -1023175525, "GasCanister" },
	{ 1300108658, "GasTank" },
	{ 829621742, "Generic00" },
	{ 1182020984, "Generic01" },
	{ -545430334, "Generic02" },
	{ -1468378028, "Generic03" },
	{ 907985399, "Generic04" },
	{ 1092219233, "Generic05" },
	{ -669998885, "Generic06" },
	{ -1357410227, "Generic07" },
	{ -1527339089, "GentlePush" },
	{ 613534905, "GentlePushSignal" },
	{ 739878568, "GetDelayValue" },
	{ 594118689, "GetFalse" },
	{ 874606784, "GetTrue" },
	{ 366196773, "GetValue" },
	{ 1219583217, "GhostPosition" },
	{ 2003437284, "GlobalHintClosed" },
	{ -553948069, "GlobalHintOpened" },
	{ 1246633515, "Glow" },
	{ -373482213, "GlowColor1" },
	{ 1890864289, "GlowColor2" },
	{ -1248553897, "GlowType" },
	{ -1347921612, "Grab" },
	{ -710441975, "GroundSoundMaterialChanged" },
	{ 965540297, "GuardKill" },
	{ -1603299529, "HMFootstepMaterialChanged" },
	{ 229787503, "HMJump_Timemultiplier" },
	{ 1548839364, "HMMovementIndex" },
	{ 1850578665, "HMState_CloseDoor" },
	{ 1876105409, "HMState_Jump" },
	{ -1916201527, "HMState_JumpFail" },
	{ -1544623272, "HMState_JumpLand" },
	{ -1954255608, "HMState_JumpLandGrab" },
	{ 1990263798, "HMState_LeftStep" },
	{ -1471094560, "HMState_OpenDoor" },
	{ 1395943075, "HMState_RightStep" },
	{ 826208500, "HMState_StartRun" },
	{ -1675689571, "HMState_StartSneak" },
	{ -1453132734, "HMState_StartWindowKill" },
	{ 642604247, "HMState_StopRun" },
	{ -36270516, "HMState_StopSneak" },
	{ 1255625420, "HMState_SwingAtWill" },
	{ -590398782, "HM_BurstShot" },
	{ -715694365, "HM_BurstShotSilenced" },
	{ -1128219479, "HM_EndBurstShot" },
	{ 1482210449, "HM_HitNPC" },
	{ 1432274234, "HM_HitNPCAt" },
	{ 1828869218, "HM_HitNPCCloseCombatShot" },
	{ 805179315, "HM_HitNPCHeadShot" },
	{ -1601956214, "HM_HitNPCHeadShotAt" },
	{ -861002280, "HM_HitNPCHeadShot_IActor" },
	{ 1292662490, "HM_HitNPCKilled" },
	{ 1029860622, "HM_HitNPCKilledAt" },
	{ 1568033874, "HM_HitNPCKilled_IActor" },
	{ -2139709845, "HM_SingleShot" },
	{ 328676686, "HM_SingleShotSilenced" },
	{ -1372955741, "HM_WeaponEquipped" },
	{ -663008724, "HM_WeaponPickedUp" },
	{ -556847978, "HM_WeaponSwapped" },
	{ 1469564587, "HM_WeaponUnequipped" },
	{ 985949464, "HangToStand" },
	{ 1183799905, "HardPush" },
	{ 59165769, "HardPushSignal" },
	{ 550123105, "HasNoUnconsciousWitness" },
	{ 406552669, "HasStartupState" },
	{ 1422716826, "HasUnconsciousWitness" },
	{ -748757626, "HaveActiveParticles" },
	{ 1887953933, "HaveUnhiddenBodies" },
	{ 1910895628, "HaveUnhiddenPacified" },
	{ 1670201254, "Headshot" },
	{ -1162163257, "HeadshotKill" },
	{ -2004062342, "Heartbeat" },
	{ -235093576, "Hero" },
	{ -160410446, "HeroOpacity" },
	{ 78341141, "Hide" },
	{ 1872092723, "HideClip" },
	{ -358688682, "HideInCloset" },
	{ 1280091494, "HideInClosetFirstTime" },
	{ 361076031, "HideIngameHUD" },
	{ -272042513, "HidingObjectivesBar" },
	{ 1889383050, "HighClamped" },
	{ 1654612129, "Hit" },
	{ -279160026, "HitFirstTime" },
	{ -1530826384, "HitTarget" },
	{ 245403319, "HitmanAimBegin" },
	{ -1375783880, "HitmanAimEnd" },
	{ 1423077949, "HitmanBumping" },
	{ 953385256, "HitmanCCBegin" },
	{ -2107502275, "HitmanCCEnd" },
	{ 358101749, "HitmanCivilianKill" },
	{ -899561097, "HitmanCrouchBegin" },
	{ -1436174888, "HitmanCrouchEnd" },
	{ 1175586220, "HitmanFullAttention" },
	{ -1117048868, "HitmanGuardKill" },
	{ 746398392, "HitmanGuardSilenced" },
	{ -845084892, "HitmanHiddenSignal" },
	{ 1496738344, "HitmanInCoverBegin" },
	{ 677263008, "HitmanInCoverEnd" },
	{ -725745345, "HitmanInSight" },
	{ -369573832, "HitmanInVision" },
	{ 109377731, "HitmanLedgePullKill" },
	{ -303027400, "HitmanNotHiddenSignal" },
	{ -2019264715, "HitmanNotSuspiciousSignal" },
	{ 1740298503, "HitmanPush" },
	{ -719860216, "HitmanPushSignal" },
	{ -1806578109, "HitmanSBBegin" },
	{ 1514070490, "HitmanSBEnd" },
	{ -455539512, "HitmanSeenEnter" },
	{ -971422602, "HitmanSeenLeave" },
	{ 1578567825, "HitmanSpotted" },
	{ 888302667, "HitmanSuspiciousSignal" },
	{ -255728412, "HitmanTrespassingSpotted" },
	{ -1298841599, "HitmanVisibleWeaponBegin" },
	{ 1405138378, "HitmanVisibleWeaponEnd" },
	{ -1711572528, "HitmanWindowPullKill" },
	{ -1627689122, "HitmanWindowPushKill" },
	{ 454411213, "HoldingIllegalWeapon" },
	{ 1980019510, "HoverMapIcon" },
	{ -296215282, "Hue" },
	{ -637307673, "IActor" },
	{ 1213240230, "IdleEnd" },
	{ 1277966941, "IdleStart" },
	{ 986529745, "IdleStop" },
	{ -686867597, "IdleTimeOut" },
	{ -1012546255, "Impact" },
	{ -1022198080, "ImpactBack" },
	{ -843937183, "ImpactFrontSide" },
	{ 586420442, "InDisguise" },
	{ -257494807, "InDisguiseZone" },
	{ -1614913817, "InLoop" },
	{ -805550112, "InPosition" },
	{ -615091138, "InSequence" },
	{ 1227186950, "InTrespassArea" },
	{ -268470332, "InTrespassEntryArea" },
	{ 795905437, "InactiveStage" },
	{ 1102202885, "Index" },
	{ -1118636158, "Inside" },
	{ -414278610, "InsideCone" },
	{ -1376604755, "InsideCrimeScene" },
	{ -1288063146, "Insideness" },
	{ -720458858, "InstinctActive" },
	{ 343275158, "InstinctTimeMultiplier" },
	{ -371033702, "InstinctUnavailable" },
	{ -1296969382, "Instinct_CC_End" },
	{ 94065591, "Instinct_CC_Impact" },
	{ 1828146865, "Instinct_CC_Start" },
	{ 544656839, "Instinct_CC_Take_Down" },
	{ -90444440, "IntegerCount" },
	{ 1647702334, "IntegerValue" },
	{ -428760741, "IntelWithinFocus" },
	{ 1799567921, "Intensity" },
	{ 1515570823, "Interrupted" },
	{ -172069903, "Invert" },
	{ 1039203169, "InvestigateCautious" },
	{ -220989773, "InvestigateCurious" },
	{ -307256461, "IsCheckedWhenFrisked" },
	{ -46244187, "IsCrouchRunning" },
	{ 2053083869, "IsCrouchWalking" },
	{ 2048834806, "IsCrouchWalkingSlowly" },
	{ 1319394243, "IsHeadshot" },
	{ -235248669, "IsInState" },
	{ -1506462954, "IsLastTriggeredAndNotTracked" },
	{ -987680797, "IsNPC" },
	{ 742505934, "IsNotTarget" },
	{ 1558130473, "IsPerceivedAsWeapon" },
	{ 1836057372, "IsPerceptibleOnRelease" },
	{ -1610149143, "IsPlayer" },
	{ -887662580, "IsRunning" },
	{ 2121353072, "IsTarget" },
	{ -1635370694, "IsVisible" },
	{ 1282839668, "IsWalking" },
	{ 915501286, "IsWalkingSlowly" },
	{ -1087796704, "Item" },
	{ 533846672, "ItemAutoDroppedDueToMovement" },
	{ 1409080613, "ItemCount" },
	{ -2035596751, "ItemFound" },
	{ 1328591349, "ItemImpactBack" },
	{ -1951187174, "ItemImpactFront" },
	{ 1861092119, "ItemImpactLow" },
	{ -1981452847, "ItemOnDeadlyThrow" },
	{ 1368560113, "ItemPrimingStart" },
	{ 863434689, "ItemPrimingStop" },
	{ 1339332540, "ItemPullOut" },
	{ -22012696, "ItemReady" },
	{ 1480402715, "ItemShot" },
	{ -953034060, "ItemSlitThroat" },
	{ 2077361705, "ItemSoundGeneric01" },
	{ -488941677, "ItemSoundGeneric02" },
	{ -1780717819, "ItemSoundGeneric03" },
	{ 1065559647, "ItemSpawned" },
	{ 805146540, "ItemStashed" },
	{ -1881841305, "ItemStuckInActor" },
	{ -1971467080, "ItemUsed" },
	{ 1381043253, "Joined" },
	{ 1998214659, "KeycardPickup" },
	{ 1025953972, "KeycardUse" },
	{ -1792128857, "Keyword" },
	{ 1391633934, "Keyword2" },
	{ 636851864, "Keyword3" },
	{ -430289529, "KeywordCount" },
	{ -1491338921, "Kill" },
	{ 9101000, "KillData" },
	{ 2113411094, "KillItemCategory" },
	{ 807301811, "KillItemInstanceId" },
	{ 1557748295, "KillItemRepositoryId" },
	{ 976093743, "KillOutfit" },
	{ 564624002, "KillType" },
	{ 1629434824, "KillWeapon" },
	{ -1244593319, "KillerHero" },
	{ -104552758, "KillerNPC" },
	{ -353824332, "KnockOutByHandUsed" },
	{ 1205879537, "Knockout" },
	{ 1650502497, "LH_Hide" },
	{ -489553373, "LH_Place" },
	{ 116417107, "LH_Retrieve" },
	{ -185091765, "LH_Show" },
	{ -479533781, "LH_Swap" },
	{ 1708788742, "LabelMatch" },
	{ 1261191006, "LadderSlideStart" },
	{ 1460413909, "LadderSlideStop" },
	{ -1233920200, "LastEnemyKilled" },
	{ -818965661, "LastGuardKilled" },
	{ 1367919509, "Last_AI_In_Alerted_Kill" },
	{ -402772856, "Last_AI_In_Checkpoint_Kill" },
	{ -1614740663, "Last_AI_In_Combat_Kill" },
	{ 685402414, "LateralShift" },
	{ -1017725606, "Leaving" },
	{ -1123206723, "LeftHandShot" },
	{ -208250086, "Lerp" },
	{ -2101799572, "LidClose" },
	{ -597958998, "LidClosed" },
	{ 2022227178, "LidOpen" },
	{ 1976218645, "LidOpened" },
	{ -1047713806, "LoadingTransitionDelayEnded" },
	{ 793187498, "LoadingTransitionDelayStarted" },
	{ 1458046379, "LocaleChanged" },
	{ -1217253851, "Log" },
	{ 725665862, "LoopCounter" },
	{ -303824650, "LooseTargetEncounterCutStarted" },
	{ -779965090, "LosingSight" },
	{ 590142129, "LowClamped" },
	{ -2044772471, "LowHealth" },
	{ 1035909196, "MainEventEnded" },
	{ 74310512, "MapLevelDown" },
	{ 410687938, "MapLevelUp" },
	{ -704703072, "Mark_Local" },
	{ 586129293, "Mark_Remote" },
	{ -2057099832, "Marker" },
	{ 264153972, "MaxDimension" },
	{ 1239476130, "MaxFacingAlertableActor" },
	{ -1701150800, "MaxIndex" },
	{ -1946434418, "MaxNumberOfTargets" },
	{ -2109774548, "MaxTensionAlertedHigh" },
	{ 1948221990, "MaxTensionAlertedLow" },
	{ 700075045, "MaxTensionAmbient" },
	{ 916860718, "MaxTensionArrest" },
	{ -1763705719, "MaxTensionCombat" },
	{ 127811717, "MaxValue" },
	{ 1470268665, "MenuClosed" },
	{ -30151098, "MenuOpened" },
	{ -1613907042, "MinDimension" },
	{ 2096812113, "MinIndex" },
	{ -503386268, "MinValue" },
	{ -912622419, "Mine" },
	{ 796291951, "MockUpAudioDisabled" },
	{ 165244587, "MockUpAudioEnabled" },
	{ -1658034508, "MultiplayerSessionPopulated" },
	{ 267473092, "MusicStarted" },
	{ -1162215180, "NPCAlerted" },
	{ 659581906, "NPCAllShots" },
	{ 716918858, "NPCCivilianAlerted" },
	{ -1125966295, "NPCCivilianScared" },
	{ -153697742, "NPCDead" },
	{ 1659528123, "NPCFirstBurstShot" },
	{ -1130533795, "NPCHasExclamationMark" },
	{ 1113154192, "NPCHasQuestionMark" },
	{ -2078547565, "NPCHasWhiteDot" },
	{ -1736477448, "NPCLoopShot" },
	{ 44970278, "NPCScared" },
	{ -1326185555, "NPCShot" },
	{ -2133599519, "NPCWeaponFire" },
	{ -1217947856, "NPC_BurstShot" },
	{ 1439181477, "NPC_BurstShotSilenced" },
	{ -920325630, "NPC_EndBurstShot" },
	{ 1625061782, "NPC_HitHM" },
	{ -250520250, "NPC_HitHMAt" },
	{ -743528970, "NPC_SingleShot" },
	{ -1935126881, "NPC_SingleShotSilenced" },
	{ 1799849892, "NavigateSlots" },
	{ -1652989951, "NavigateTabs" },
	{ -1421277450, "NavigatedBetweenEntries" },
	{ 1462450912, "NeckSnap" },
	{ 1278047498, "Negate" },
	{ 1933746956, "NewObjectiveAtStartHudDisplayed" },
	{ -1502611781, "NewObjectiveDuringLevelHudDisplayed" },
	{ 1437582101, "NextPageTabSelected" },
	{ -1746883515, "NoContainerItem" },
	{ -1637405133, "NoEmptyContainerItem" },
	{ -1611828696, "NoEquipContainedItem" },
	{ 847762711, "NoMoreInteractive" },
	{ 47062522, "NoPageTabAvailable" },
	{ 1448984542, "NoPlaceItem" },
	{ 625821563, "Node" },
	{ -587453704, "Nodes" },
	{ -1452807755, "NonTargetKilled" },
	{ 1361843442, "NormalShot" },
	{ -1657753213, "NotEqual" },
	{ 1349044087, "NumOccupiedSpots" },
	{ -1830520908, "NumOccupiedSpotsFemale" },
	{ 1375266604, "NumOccupiedSpotsMale" },
	{ -1499286996, "NumOccupiedSpotsMalePercent" },
	{ 1562625588, "NumberOfPickups" },
	{ 94562626, "ObjectEvent01" },
	{ -1666467592, "ObjectEvent02" },
	{ -341014418, "ObjectEvent03" },
	{ 1976049101, "ObjectEvent04" },
	{ -1174865207, "ObjectiveActivate" },
	{ 1881696209, "ObjectiveCompleted" },
	{ 1145662121, "ObjectiveCompletedHudDisplayed" },
	{ -45201040, "ObjectiveFailed" },
	{ 940811552, "ObjectiveFailedHudDisplayed" },
	{ -69148801, "ObjectiveUpdate" },
	{ -360419740, "OccludersAny" },
	{ -103963262, "OccludersNone" },
	{ 334568355, "Off" },
	{ -1674441366, "On" },
	{ -527968007, "OnAbort" },
	{ -481945564, "OnAbortEntering" },
	{ 1115170616, "OnAbortStart" },
	{ 1593493705, "OnAborted" },
	{ -403749932, "OnAccidentDeath" },
	{ 1135192372, "OnAccidentStarted" },
	{ -749289650, "OnActDone" },
	{ -727937483, "OnActTimeout" },
	{ -1123210116, "OnActionA" },
	{ 604274118, "OnActionB" },
	{ -1514768424, "OnActionFailed" },
	{ -768318508, "OnActionNotUsable" },
	{ 1051948010, "OnActionUsed" },
	{ -647592772, "OnActionX" },
	{ -1369328598, "OnActionY" },
	{ 849926143, "OnActivate" },
	{ -2088851856, "OnActivateByHM" },
	{ -898421636, "OnActivateHit" },
	{ -1283142240, "OnActivateImpact" },
	{ -1242755690, "OnActivated" },
	{ -134830924, "OnActivatedByForwardSpawn" },
	{ -1285136377, "OnActive" },
	{ 1581726244, "OnActor" },
	{ 874048805, "OnActorAIEvent" },
	{ -263928463, "OnActorAdded" },
	{ 570925775, "OnActorBodybagged" },
	{ -2016547882, "OnActorCast" },
	{ 861716970, "OnActorChanged" },
	{ -843094653, "OnActorContained" },
	{ 2018515716, "OnActorDead" },
	{ -95505457, "OnActorEnteredStage1" },
	{ 132224878, "OnActorEnteredStage1Signal" },
	{ 1665655413, "OnActorEnteredStage2" },
	{ 906595827, "OnActorEnteredStage2Signal" },
	{ 339792611, "OnActorEnteredStage3" },
	{ -1870756281, "OnActorEnteredStage3Signal" },
	{ -1865775991, "OnActorHit" },
	{ -722976504, "OnActorImpact" },
	{ -1841541141, "OnActorInvestigated" },
	{ -982840025, "OnActorInvestigating" },
	{ 1708739909, "OnActorInvestigationTerminated" },
	{ -1669994159, "OnActorNotAdded" },
	{ -561815560, "OnActorNotContained" },
	{ -1986059747, "OnActorNotRemoved" },
	{ -389497813, "OnActorPacified" },
	{ 1367324914, "OnActorPickup" },
	{ -1570668358, "OnActorReacted" },
	{ -429728114, "OnActorReleased" },
	{ 784533101, "OnActorRemoved" },
	{ 479788834, "OnActorRevived" },
	{ 824662072, "OnActorSeen" },
	{ 739018516, "OnActorSet" },
	{ -1714946488, "OnActorSpawned" },
	{ 754850106, "OnActorTagged" },
	{ -891162325, "OnActorUntagged" },
	{ 1845519255, "OnActorWillReact" },
	{ -779224010, "OnAdded" },
	{ 1856842240, "OnAlarm" },
	{ 775991576, "OnAlerted" },
	{ 168375950, "OnAlive" },
	{ 76695108, "OnAllEscortsDied" },
	{ 864251611, "OnAmbient" },
	{ -1363691560, "OnAnchorsLost" },
	{ 729272487, "OnArrival" },
	{ 649191556, "OnAttach" },
	{ -2015245018, "OnAttachToHitman" },
	{ -758786914, "OnAttachToNPC" },
	{ -328617510, "OnAttached" },
	{ 544103054, "OnAvailable" },
	{ -831627984, "OnBaseScoreUpdate" },
	{ 873895432, "OnBecomeInvisible" },
	{ -1755695355, "OnBecomeVisible" },
	{ -1768105670, "OnBehaviorEnded" },
	{ 1986118118, "OnBehaviorStarted" },
	{ -1906994849, "OnBloodyKill" },
	{ 1354378407, "OnBodyBagged" },
	{ 1700244329, "OnBodyDumped" },
	{ 1282824030, "OnBodyFlushed" },
	{ 470795776, "OnBodyFound" },
	{ 829930665, "OnBodyHidden" },
	{ -140764611, "OnBodyNoticed" },
	{ 450048113, "OnBroken" },
	{ 656542102, "OnBusy" },
	{ 1604174492, "OnCameraDestroyed" },
	{ -856133169, "OnCaptured" },
	{ -978178278, "OnCastRole" },
	{ -1997943776, "OnChallengeCompleted" },
	{ -1204854235, "OnChange" },
	{ 622322646, "OnChangedOutfit" },
	{ 1445168156, "OnCheckLastKnownPosition" },
	{ -121614, "OnCleared" },
	{ -54537759, "OnClosed" },
	{ -567485003, "OnCollision" },
	{ -154796102, "OnCollisionEnergyReached" },
	{ 1965653917, "OnCombat" },
	{ -279094532, "OnCombatEnded" },
	{ -1620043147, "OnCombatStarted" },
	{ -962002063, "OnComplete" },
	{ -1088839067, "OnCompleted" },
	{ 1942744048, "OnCompletedByForwardSpawn" },
	{ -1500696205, "OnCompliedAfterWarning" },
	{ -1679036120, "OnCompromised" },
	{ 4280612, "OnConsumed" },
	{ -1231575231, "OnContained" },
	{ -62857159, "OnContainerDestroyed" },
	{ 1521352587, "OnCooldown" },
	{ -234127033, "OnCorneredBegin" },
	{ -1650835615, "OnCorneredEnd" },
	{ 1531134062, "OnCured" },
	{ 297579369, "OnCurious" },
	{ -1402882024, "OnCurrent" },
	{ 1768024869, "OnDeactivate" },
	{ 94234928, "OnDead" },
	{ -857297884, "OnDeadlyHeavyItem" },
	{ 1681488391, "OnDeadlyLightItem" },
	{ -42616333, "OnDeath" },
	{ 1925278096, "OnDeathNPC" },
	{ 1585261621, "OnDestroyed" },
	{ 737988357, "OnDetach" },
	{ 1696606404, "OnDetached" },
	{ 83379023, "OnDidEnterCombat" },
	{ 3194289, "OnDisabled" },
	{ 1491731690, "OnDollyTargetingFirstPoint" },
	{ 1513902964, "OnDollyTargetingLastPoint" },
	{ -124436289, "OnDone" },
	{ 121027555, "OnDrainHealthDone" },
	{ 422905798, "OnDrainHealthStarted" },
	{ 646635467, "OnDramaNewBehavior" },
	{ -1861010259, "OnDramaResuming" },
	{ -1733450442, "OnDrop" },
	{ -238204392, "OnDropByHero" },
	{ -918821082, "OnDying" },
	{ -1173589239, "OnEffectActivated" },
	{ -1831585169, "OnEffectDeactivated" },
	{ -1895960560, "OnEject" },
	{ -219356110, "OnEmoteStarted" },
	{ 543897495, "OnEnabled" },
	{ 8918262, "OnEnd" },
	{ -743900411, "OnEndDumpingBody" },
	{ 1269873298, "OnEnded" },
	{ -1555911501, "OnEnter" },
	{ 1449840198, "OnEnterConnector" },
	{ 848947988, "OnEnterDeadZone" },
	{ -1350900147, "OnEnterDrama" },
	{ -1519468559, "OnEnterRole" },
	{ 35076535, "OnEnterScopeMode" },
	{ 50633126, "OnEntered" },
	{ -845739812, "OnEntering" },
	{ 882473258, "OnEqual" },
	{ 367619116, "OnErased" },
	{ -1966822982, "OnEscaping" },
	{ 330567444, "OnEscapingEnd" },
	{ -181619023, "OnEvacuationStandDown" },
	{ -741973037, "OnEvacuationStarted" },
	{ 563897978, "OnEvent" },
	{ 858647539, "OnEvent1" },
	{ -1440433591, "OnEvent2" },
	{ -584873249, "OnEvent3" },
	{ 1128734588, "OnEvent4" },
	{ 876621802, "OnEvent5" },
	{ -1387692464, "OnEvent6" },
	{ -632402234, "OnEvent7" },
	{ 1257329495, "OnEvent8" },
	{ 217988953, "OnExfiltrationStarted" },
	{ 2091983898, "OnExit" },
	{ -1530843111, "OnExitDeadZone" },
	{ 1406590589, "OnExitRole" },
	{ 2083528145, "OnExitScopeMode" },
	{ 1970836876, "OnFacing" },
	{ 1855949661, "OnFail" },
	{ 1727217522, "OnFailed" },
	{ -1193896217, "OnFailedAcknowledge" },
	{ -1967166223, "OnFailedGreeting" },
	{ -232275039, "OnFailedResponse" },
	{ 1359581138, "OnFailure" },
	{ 838796525, "OnFalse" },
	{ -1713826198, "OnFinishedTargetZoom" },
	{ 772916758, "OnFireProjectiles" },
	{ -529353601, "OnFireProjectilesLocal" },
	{ 884399465, "OnFireProjectilesRemote" },
	{ -2008841590, "OnFirst" },
	{ -632210996, "OnFirstDeathNPC" },
	{ -156095054, "OnFirstShotHero" },
	{ -217897054, "OnFirstShotNPC" },
	{ -99566844, "OnFlushBodyEnd" },
	{ -441909620, "OnFlushBodyStart" },
	{ -1383861814, "OnForcedAnim" },
	{ -1666290840, "OnFoundTargetDead" },
	{ -1915792055, "OnFoundTargetUnconscious" },
	{ 118728372, "OnFracture" },
	{ -1516871204, "OnFree" },
	{ -264948597, "OnFriskClean" },
	{ 394545725, "OnFriskPrompt" },
	{ -45151945, "OnGet" },
	{ 867211928, "OnGetAccessoryItem" },
	{ 1903670151, "OnGetCondition" },
	{ 132643818, "OnGetEntityRef" },
	{ -46769646, "OnGetGroupID" },
	{ -1552753751, "OnGetHealth" },
	{ -1341683349, "OnGetIActor" },
	{ 1776921820, "OnGetItem" },
	{ -1748633027, "OnGetItemNotFound" },
	{ -565706918, "OnGetItemUsed" },
	{ 1605004987, "OnGetOutfit" },
	{ 1022313745, "OnGetSetpieceUsed" },
	{ -1649758442, "OnGetTally" },
	{ -980503988, "OnGetTallyRemaining" },
	{ 1240186283, "OnGetThisSetpiece" },
	{ -1037207559, "OnGreeting" },
	{ 678819475, "OnGreetingNotAllowed" },
	{ -185684057, "OnHandleBreakRecorder" },
	{ 1665111029, "OnHandleDisableCamera" },
	{ -1641081384, "OnHardWarning" },
	{ -696584937, "OnHearAccident" },
	{ 778894965, "OnHearBulletImpact" },
	{ 789631804, "OnHearExplosion" },
	{ -591347568, "OnHearGunshot" },
	{ 1487201008, "OnHeroEnterCover" },
	{ 1515904216, "OnHeroLeaveCover" },
	{ 1277258559, "OnHide" },
	{ 1017020647, "OnHintCancelled" },
	{ 1332731774, "OnHintStarted" },
	{ 1520828678, "OnHit" },
	{ 727781548, "OnHitByImpulse" },
	{ -1602603006, "OnHitByImpulseInfo" },
	{ 2079324756, "OnHitByItem" },
	{ 1022429191, "OnHitInfo" },
	{ 216641334, "OnHit_AfterInfo" },
	{ 1386118309, "OnHitmanEnter" },
	{ 1954771147, "OnHitmanExit" },
	{ 1885223963, "OnHitmanLeave" },
	{ 2083796512, "OnHolster" },
	{ 634908116, "OnIActor" },
	{ 891410217, "OnIActorChanged" },
	{ 1014062082, "OnImpact" },
	{ -1117801210, "OnImpactInfo" },
	{ 1711448864, "OnInfectedPercentageChanged" },
	{ -455373190, "OnInitialDetach" },
	{ -1368425044, "OnInitialFracture" },
	{ 752719815, "OnInteractedWith" },
	{ -1777755137, "OnInteractionBegin" },
	{ 690018546, "OnInteractionEnd" },
	{ -749604974, "OnInteractionInterrupted" },
	{ -1625437246, "OnInteractorSet" },
	{ 1698220641, "OnInterrupted" },
	{ -865202040, "OnInvestigated" },
	{ 294547354, "OnInvestigating" },
	{ -1022399313, "OnInvestigatorAssigned" },
	{ -1315612428, "OnInvisible" },
	{ -852902449, "OnIsFullyInCrowd" },
	{ 1837472079, "OnIsFullyInVegetation" },
	{ -140278518, "OnItem" },
	{ -1435167461, "OnItemChanged" },
	{ 1401673392, "OnItemConsumed" },
	{ -1454591505, "OnItemDestroyed" },
	{ -1275744506, "OnItemFocus" },
	{ -1335202394, "OnItemGrabbed" },
	{ 1293427614, "OnItemPlaced" },
	{ 1575096216, "OnItemPrimed" },
	{ 1991070726, "OnItemPrimedAndReady" },
	{ 1023852986, "OnItemRemovedPinID" },
	{ -622495679, "OnItemSet" },
	{ 277906250, "OnItemStashed" },
	{ 842439472, "OnItemsSpawned" },
	{ 1529578993, "OnJoinNPC" },
	{ -275646851, "OnKill" },
	{ -59688267, "OnKnight" },
	{ 3824552, "OnKnockdownHeavyItem" },
	{ -1461351029, "OnKnockdownLightItem" },
	{ -1570567756, "OnLast" },
	{ -2122126323, "OnLeave" },
	{ 2032675858, "OnLeaveConnector" },
	{ -1383802779, "OnLeaveDrama" },
	{ 2088306901, "OnLeaving" },
	{ -1830860932, "OnLeft" },
	{ 474007645, "OnLethalImpact" },
	{ -1608386473, "OnLinkedEntityApplied" },
	{ -1852068474, "OnLockdownEnd" },
	{ 313152660, "OnLocked" },
	{ -1759653618, "OnLostOwnership" },
	{ 636979187, "OnLostSightTimeout" },
	{ 1987231655, "OnMaxInfected" },
	{ 1765886123, "OnMaxSightAttentionToPlayer" },
	{ -1530573641, "OnModifierActivated" },
	{ 1593084589, "OnModifierDeactivated" },
	{ 126261100, "OnMove" },
	{ 1843923125, "OnMoveBegin" },
	{ 1135050202, "OnMoveEnd" },
	{ 577516054, "OnMovementForced" },
	{ 936557110, "OnMurdered" },
	{ -1421463508, "OnNegative" },
	{ -1441016962, "OnNegativeSide" },
	{ -726242845, "OnNeutral" },
	{ -325603288, "OnNext" },
	{ -850631781, "OnNoAccessoryItem" },
	{ -461696720, "OnNoContainedItem" },
	{ -1641871525, "OnNoEquipContainedItem" },
	{ -221047883, "OnNoEquipItem" },
	{ -28580308, "OnNoItem" },
	{ -877548521, "OnNoReceiversRegistered" },
	{ -980639079, "OnNonTargetObjectiveCompleted" },
	{ 94143899, "OnNotAdded" },
	{ 371785044, "OnNotAvailable" },
	{ -2133786469, "OnNotContained" },
	{ -1643026635, "OnNotCurrent" },
	{ -527957881, "OnNotEqual" },
	{ -573875296, "OnNotFacing" },
	{ -57759421, "OnNotRemoved" },
	{ -138516913, "OnNotSpotted" },
	{ 1429125982, "OnOpened" },
	{ 1245553575, "OnOriginalASet" },
	{ 1485311049, "OnOriginalBSet" },
	{ 291655855, "OnOriginalSet" },
	{ -1828129505, "OnOutfitChanged" },
	{ -1778719741, "OnOutfitReacquired" },
	{ 965987005, "OnOutfitSpawned" },
	{ -1939378710, "OnOutfitTaken" },
	{ 1898041569, "OnPacified" },
	{ -1843281055, "OnPacify" },
	{ 117978418, "OnPacifyHeavyItem" },
	{ -1344806127, "OnPacifyLightItem" },
	{ 1705640944, "OnPassedFilter" },
	{ -844562896, "OnPause" },
	{ 1731459193, "OnPauseDrama" },
	{ 992021443, "OnPauseRole" },
	{ -1176066568, "OnPickup" },
	{ -2063305321, "OnPlaced" },
	{ -1238270290, "OnPlay" },
	{ 1286610166, "OnPlayerAdded" },
	{ 1438940519, "OnPlayerInRangeToSpreadToNPC" },
	{ -1525752219, "OnPlayerRemoved" },
	{ 512719904, "OnPointInsideVolume" },
	{ -43223067, "OnPositionReached" },
	{ -835696841, "OnPositive" },
	{ 939538066, "OnPositiveSide" },
	{ 1808151657, "OnPressed" },
	{ -1224892120, "OnPressedIActor" },
	{ -318768411, "OnProjectionTurnedOff" },
	{ -1648804941, "OnProjectionTurnedOn" },
	{ -2054205379, "OnPutInContainer" },
	{ -1460174207, "OnQueueCompleted" },
	{ -375483467, "OnQueueStarted" },
	{ -1327064583, "OnRayEnter" },
	{ -1842947769, "OnRayLeave" },
	{ 1465952941, "OnReached" },
	{ 1113387193, "OnReacted" },
	{ 849865074, "OnReady" },
	{ -1667835020, "OnReadyActor" },
	{ -1144733493, "OnReadyActorAsEntity" },
	{ 144993298, "OnReadyInRangeVR" },
	{ -239242570, "OnReadyItem" },
	{ -756333442, "OnReadySetpiece" },
	{ -1616357964, "OnRecorded" },
	{ -2056240241, "OnReenterRole" },
	{ 1553941996, "OnRefillHealth" },
	{ -287994098, "OnRelease" },
	{ 2139861572, "OnReleased" },
	{ 1094220222, "OnReleasedIActor" },
	{ -822184338, "OnRemoved" },
	{ 480444469, "OnRemovedFromContainer" },
	{ -825207485, "OnRequestPutInContainer" },
	{ 1253036944, "OnReset" },
	{ -2012835289, "OnResize" },
	{ -565834386, "OnResponderSet" },
	{ 1516818844, "OnResponding" },
	{ -1754550764, "OnRestart" },
	{ -1732686683, "OnResume" },
	{ 1056548071, "OnResumed" },
	{ -29808219, "OnResumingRole" },
	{ 1980127314, "OnRise" },
	{ -1193135888, "OnRoleJoined" },
	{ -1483602292, "OnRoleLeft" },
	{ -465221243, "OnRunningRole" },
	{ 1734557530, "OnSafeRoomBegin" },
	{ 23683920, "OnSafeRoomCompromised" },
	{ 1691818368, "OnSafeRoomEnd" },
	{ 1937260849, "OnScoringEvent" },
	{ -384414973, "OnSearchStarted" },
	{ 529829651, "OnSeeActorAgitatedBystander" },
	{ -763378547, "OnSeeActorCombat" },
	{ -1261062885, "OnSeeActorGettingHelp" },
	{ 997384895, "OnSeeActorScared" },
	{ 1853264409, "OnSeeAgitatedBystander" },
	{ -797139163, "OnSeeCombat" },
	{ 1439090185, "OnSeeDead" },
	{ -867404387, "OnSeeDeadByAccident" },
	{ -654428876, "OnSeeGettingHelp" },
	{ -100985269, "OnSeePlayerIllegalInteraction" },
	{ -2099455851, "OnSeePlayerSevereIllegalInteraction" },
	{ 963754263, "OnSeeScared" },
	{ -1484026584, "OnSeeUnconscious" },
	{ 476540116, "OnSelected" },
	{ -1045702739, "OnSelectedMuzzleExtension" },
	{ 1728342797, "OnSelectedScope" },
	{ 1947040389, "OnSelectedSkin" },
	{ -429915493, "OnSet" },
	{ 680827495, "OnSetAmmoScopeType" },
	{ -92793855, "OnSetItem" },
	{ 1724970827, "OnSetKinematic" },
	{ 2133605281, "OnSetVisible" },
	{ 493696567, "OnSetZoomLevel" },
	{ 1638871716, "OnShatter" },
	{ 1136601263, "OnShot" },
	{ 576686960, "OnShotDamageReached" },
	{ -430887806, "OnShotVolumeIntersection" },
	{ -625575659, "OnShow" },
	{ 1795390607, "OnShowExitObjective" },
	{ 1255493015, "OnSit" },
	{ 1775002817, "OnSituation" },
	{ 352431729, "OnSleep" },
	{ 665298592, "OnSniperScoringActive" },
	{ -441796898, "OnSoundEventExplosion" },
	{ -1975737542, "OnSpawn" },
	{ 1447772045, "OnSpawnPointFound" },
	{ 66930855, "OnSpeedChanged" },
	{ -976307870, "OnSpotted" },
	{ 635826224, "OnSpreadingActorDied" },
	{ 1826132528, "OnStandDown" },
	{ -2058667694, "OnStart" },
	{ -1304555876, "OnStartDumpingBody" },
	{ 1607045, "OnStartIntermediateFailed" },
	{ -734433535, "OnStartIntermediateOnActorFailed" },
	{ -1475845322, "OnStartPriming" },
	{ -2035506635, "OnStartRotating" },
	{ -1006363959, "OnStarted" },
	{ -158663110, "OnStartedActor" },
	{ -841036301, "OnStateChanged" },
	{ -1425973720, "OnStep" },
	{ 51538423, "OnStone" },
	{ 1374598818, "OnStop" },
	{ 845267402, "OnStopPriming" },
	{ 842888608, "OnStopRotating" },
	{ -701184769, "OnStopped" },
	{ 529683361, "OnSuccess" },
	{ 869191507, "OnTakeDamage" },
	{ -1357577400, "OnTallyChanged" },
	{ 1480320355, "OnTargetDead" },
	{ -1464832188, "OnTargetInRange" },
	{ 2098926056, "OnTargetOutOfRange" },
	{ 1270588714, "OnTargetUnconscious" },
	{ -378268133, "OnTerminate" },
	{ 948046233, "OnThrown" },
	{ -912343199, "OnTimeOut" },
	{ -1165569847, "OnTimeToSearch" },
	{ 1286978543, "OnTransitionBegin" },
	{ 1743617244, "OnTransitionEnd" },
	{ -1422766636, "OnTriggeredEvent01" },
	{ 842734702, "OnTriggeredEvent02" },
	{ 1161571576, "OnTriggeredEvent03" },
	{ -614942373, "OnTriggeredEvent04" },
	{ -1403024947, "OnTriggeredEvent05" },
	{ 894883959, "OnTriggeredEvent06" },
	{ 1112664289, "OnTriggeredEvent07" },
	{ -756091536, "OnTriggeredEvent08" },
	{ 356838553, "OnTrue" },
	{ -1632330718, "OnTumble" },
	{ 443402761, "OnTurnOff" },
	{ -1230009242, "OnTurnOn" },
	{ -2050634427, "OnUnlocked" },
	{ -1319688669, "OnUnnoticableKill" },
	{ 1894295355, "OnUnpause" },
	{ -2028481419, "OnUnpauseDrama" },
	{ -1845509364, "OnUsed" },
	{ -627571827, "OnVRQuickDeath" },
	{ 121976041, "OnValue" },
	{ 1750683033, "OnValueChanged" },
	{ 718045457, "OnVelocityChanged" },
	{ -301482151, "OnVictimDeath" },
	{ 806634092, "OnVictimDeathActor" },
	{ 1053830114, "OnVictimsInAccident" },
	{ 170026058, "OnVisible" },
	{ -841981567, "OnWake" },
	{ 819728597, "OnWarning" },
	{ 333595650, "OnWeaponBroken" },
	{ 354984277, "OnWillReact" },
	{ 1149399241, "OnWrap" },
	{ 1894516874, "OpenCalled" },
	{ -91776405, "OpenMap" },
	{ -1426447763, "Opened" },
	{ -368595208, "Out00" },
	{ -1660903826, "Out01" },
	{ 67751892, "Out02" },
	{ 1930362690, "Out03" },
	{ -311792927, "Out04" },
	{ -1704109449, "Out05" },
	{ 56888269, "Out06" },
	{ 1952660315, "Out07" },
	{ -455334198, "Out08" },
	{ -1434156796, "Out1" },
	{ 864932030, "Out2" },
	{ 1149952040, "Out3" },
	{ -621906549, "Out4" },
	{ -1377221347, "Out5" },
	{ 887100583, "Out6" },
	{ 1139221553, "Out7" },
	{ -749192800, "Out8" },
	{ 1669898626, "OutB" },
	{ 333600013, "OutG" },
	{ -55426879, "OutOfSight" },
	{ 1526892808, "OutPeer" },
	{ 2118103526, "OutR" },
	{ -764329266, "OutRGB" },
	{ -1344864130, "OutRGBA" },
	{ -2102441518, "OutSelf" },
	{ -640187692, "OutSignal" },
	{ 1999668437, "OutSignalData" },
	{ -1628808968, "OutX" },
	{ -370317202, "OutY" },
	{ 1894005204, "OutZ" },
	{ -388877218, "OutfitID" },
	{ -1234400111, "OutfitRecovered" },
	{ -1291165428, "OutfitTaken" },
	{ -881716824, "Output" },
	{ 1528477308, "Output1" },
	{ -1038882874, "Output2" },
	{ -1256925360, "Output3" },
	{ 728777459, "Output4" },
	{ 1551331941, "Output5" },
	{ 1899454797, "OutputBool" },
	{ 770077621, "OutputEvent" },
	{ -538105977, "OutputFloat" },
	{ 379953986, "OutputInt" },
	{ -264168899, "OutputModeHeadphones" },
	{ -1088273687, "OutputModeStereo" },
	{ -666659963, "OutputModeSystem" },
	{ -1953855137, "OutputTargetLocation" },
	{ 2052572218, "Outside" },
	{ 1641153220, "OutsideCone" },
	{ -2142302164, "OutsideMonitorDistance" },
	{ -375017870, "OverTheShoulderCam" },
	{ -429425519, "OwnedByHitman" },
	{ -1944252597, "OwnedByNPC" },
	{ 211378661, "Pacified" },
	{ 205533496, "PacifiedData" },
	{ -1252123340, "PageBack" },
	{ -1601218488, "PageClosed" },
	{ 2095079335, "PageOpen" },
	{ 152974071, "PageOpened" },
	{ 1235981324, "PageSelectionChanged" },
	{ -788483810, "ParentRepositoryId" },
	{ 191518696, "PausedControllerHintClosed" },
	{ -1560593065, "PausedControllerHintOpened" },
	{ -1673580814, "PetrolCan" },
	{ -199961673, "Pig" },
	{ -1981005522, "Pigeon" },
	{ -493529472, "PipeSlideStart" },
	{ 1389078585, "PipeSlideStop" },
	{ -430009891, "Pitch" },
	{ -21270140, "Play" },
	{ -308354839, "PlaySound" },
	{ 723052756, "PlayerAllShots" },
	{ -1765717906, "PlayerEndBurstShot" },
	{ 357548882, "PlayerFirstBurstShot" },
	{ -1808271362, "PlayerLoopShot" },
	{ 818309893, "PlayerSecondBurstShot" },
	{ 1948417164, "PlayerShot" },
	{ -1272672686, "PollValue" },
	{ -1987055444, "Port0Out" },
	{ 825464777, "Port1Out" },
	{ 595998759, "Port2Out" },
	{ -1690673342, "Port3Out" },
	{ -1084586333, "Position" },
	{ 15622449, "PositionOutput" },
	{ 1783312036, "Power" },
	{ -1856877869, "PrecisionAimedKill" },
	{ -722894362, "Pressed" },
	{ 1441079950, "PressedWFrameTime" },
	{ 140167633, "PreviousPageTabSelected" },
	{ 269519631, "PrimaryObjectiveCompleted" },
	{ 471294817, "PrimaryObjectiveFailed" },
	{ 716099570, "PrincipalTargetAngleHoriz" },
	{ 282713860, "PrincipalTargetAngleVert" },
	{ 969704402, "PrincipalTargetDistance" },
	{ -140795354, "PrincipalTargetIndex" },
	{ 1266359275, "PrincipalTargetVisible" },
	{ -612921328, "Progress" },
	{ -536165175, "ProjectileBodyShot" },
	{ 95116165, "ProjectileCrowdBodyShot" },
	{ -123282813, "ProjectileCrowdHeadShot" },
	{ 487015887, "ProjectileHeadShot" },
	{ 373206903, "ProjectileMissed" },
	{ -376123929, "ProjectileMultiKillTargets" },
	{ -1962363066, "PromptPositionIndex" },
	{ -841181530, "PropKill" },
	{ -694237316, "PunchBody" },
	{ 136492969, "PunchFace" },
	{ -889955828, "QuestItemPickup" },
	{ 1434537202, "RH_Hide" },
	{ -1948049094, "RH_Place" },
	{ -93287010, "RH_Retrieve" },
	{ -1021944104, "RH_Show" },
	{ -729087304, "RH_Swap" },
	{ 1745842852, "RayLength" },
	{ -397467870, "Reached" },
	{ -1277745106, "ReachedArea" },
	{ -811735852, "ReachedZero" },
	{ 886011295, "ReactionTriggered" },
	{ 777456276, "ReactionTriggeredAtPos" },
	{ 1621342873, "ReceivedKeyword" },
	{ -2017128801, "Received_ZString" },
	{ 1054888328, "Received_ZVariant" },
	{ 909758687, "Received_bool" },
	{ 1214028898, "Received_float32" },
	{ -290253850, "Received_int32" },
	{ -1312604253, "Received_void" },
	{ 504409269, "Recovered" },
	{ 1008625752, "ReleasedItem" },
	{ -1287872021, "Reload_Red" },
	{ 425456961, "Reload_White" },
	{ 2067827374, "RemoteTriggered" },
	{ -253701457, "RemovalOfObjectiveHudDisplayed" },
	{ -1309489175, "RemovedEntity" },
	{ -1064101874, "RemovedKeyword" },
	{ -875161996, "RemovedSignal" },
	{ 1405626397, "ReportItemUsed" },
	{ -1506485425, "ReportOwner" },
	{ -2035339568, "ReportOwnerPosition" },
	{ -2101769880, "RepositoryID" },
	{ -1177048672, "RepositoryId" },
	{ -42550003, "RequestFailed" },
	{ -249322226, "RequestSucceeded" },
	{ 1533737095, "ResetTestCase" },
	{ 348570661, "Result" },
	{ -649033386, "RightHandHoldsFirearm" },
	{ 1231615495, "RightHandHoldsMelee" },
	{ 1217701313, "RightHandIsReloading" },
	{ -571729293, "RightHandPredictionForce" },
	{ -1733941728, "RoomID" },
	{ -1547172120, "RoomId" },
	{ 802925910, "RotationOutput" },
	{ -158875635, "RoundingCover" },
	{ 1748754976, "Run" },
	{ -1075015717, "RunTestCase" },
	{ -1392877180, "RunUsed" },
	{ 1549950586, "Same" },
	{ -306766848, "ScoreAwesome" },
	{ 1470683812, "ScoreCommon" },
	{ -1641677355, "ScoreFail" },
	{ 1680523446, "ScoreFair" },
	{ 1954977806, "ScoreGood" },
	{ 1669728585, "ScoreStartUpdate" },
	{ 1283346791, "ScoreStopUpdate" },
	{ 1780719647, "SecondaryObjectiveCompleted" },
	{ 1316272349, "SecondaryObjectiveFailed" },
	{ 421316178, "SecurityCameraAttentionMax" },
	{ -1551354021, "SecurityCameraAttentionMaxPan" },
	{ -500730549, "SecurityTapePickup" },
	{ 1642061264, "Selected" },
	{ 1111174197, "SelectionChanged" },
	{ -2129830719, "SendDestinationPosition" },
	{ 388400141, "SendEventName" },
	{ -781516592, "SendSourcePosition" },
	{ 1738882331, "SendValue" },
	{ -1272936135, "SetActor" },
	{ -635959245, "SetCinemaMode" },
	{ 1934358366, "SetCinemaModeHighFramerate" },
	{ 351444829, "SetCrosshair" },
	{ -1058268134, "SetGlowType" },
	{ 1178330814, "SetIActor" },
	{ 395925583, "SetImageRID" },
	{ -1696003619, "SetLength" },
	{ -698857560, "SetOpenCalled" },
	{ 21618847, "SetParticleAlpha" },
	{ -1207987940, "SetParticleColor" },
	{ 1547664996, "SetReticleMax" },
	{ 1613906237, "SetReticleMin" },
	{ -1697060939, "SetUpTestCase" },
	{ -316504076, "SetValue" },
	{ 1056173252, "ShotBegin" },
	{ 1396300407, "ShotEnd" },
	{ -685231563, "ShotFired" },
	{ 1471438046, "ShotFiredIntoCrowd" },
	{ -770267586, "ShotInterval" },
	{ -1637854294, "ShotsPerMinute" },
	{ -682630777, "ShotsPerSecondHero" },
	{ -1170495594, "ShotsPerSecondNPC" },
	{ -1841531329, "Show" },
	{ -1730884389, "ShowClip" },
	{ 20110319, "ShowHint" },
	{ -211197357, "ShowRecenterHint" },
	{ 429965353, "ShowTargetsMustBeDead" },
	{ 1939902659, "Signal" },
	{ -215926486, "SignalData" },
	{ 1500202446, "SignalDistance" },
	{ -1552504240, "SignalMatched" },
	{ 165549998, "SilentTakedownHardShakeEvent" },
	{ 1154500282, "SilentTakedownPrimingStart" },
	{ -1416825444, "SilentTakedownPrimingStop" },
	{ 1625388711, "SilentTakedownStartMovement" },
	{ 2057674236, "SilentTakedownStopMovement" },
	{ -1144039635, "SkullCrack" },
	{ 1817884957, "SliderChanged" },
	{ -1092124814, "SnapNeckBrokenNeckEvent" },
	{ 66065153, "SnapNeckPrimingStart" },
	{ 957755762, "SnapNeckPrimingStop" },
	{ 1008024822, "SnapNeckStartMovement" },
	{ 1032177735, "SnapNeckStopMovement" },
	{ 1469732300, "SniperModeZoomIn" },
	{ -1544434904, "SniperModeZoomLevel" },
	{ -1168836274, "SniperModeZoomOut" },
	{ 700499291, "SniperSlowDownStart" },
	{ 1726742409, "SniperSlowDownStop" },
	{ -2132331931, "SomeoneDied" },
	{ 404568849, "SomeonePacified" },
	{ 8062158, "SomeoneScared" },
	{ -1082151796, "SoundEvent01" },
	{ 645332278, "SoundEvent02" },
	{ 1366412704, "SoundEvent03" },
	{ -820684797, "SoundEvent04" },
	{ -1686475288, "SoundSignalEmitted" },
	{ -2039808820, "SoundTensionAmbient" },
	{ -380133019, "SpatialEntity" },
	{ -629426625, "SpawnPhysicsClip" },
	{ 755042572, "Speaking" },
	{ 632825129, "SplashAtPos" },
	{ -1007550032, "SpottedByHitman" },
	{ 758776178, "SpottedEnteringCloset" },
	{ -412484405, "SpottedThroughDisguise" },
	{ -407973018, "Sqrt" },
	{ 932817369, "StandToHang" },
	{ 1589148299, "Start" },
	{ -1824138053, "StartCoverTakedown" },
	{ -1639716792, "StartExecuteKill" },
	{ -1538036500, "StartFiberwireKill" },
	{ -655954206, "StartLedgePullKill" },
	{ -538511252, "StartLedgePushKill" },
	{ -97558275, "StartPropKill" },
	{ 1279019102, "StartPropKillSilent" },
	{ -372825993, "StartSubdueTakedown" },
	{ -343837528, "StartSurrender" },
	{ -716436584, "StartWindowPullKill" },
	{ -766763754, "StartWindowPushKill" },
	{ -1236192982, "Start_FWKill" },
	{ -1963995605, "Start_FWLong" },
	{ 1615657199, "Start_FWShort" },
	{ 1112265468, "Start_KnifeBack" },
	{ -228393763, "Start_KnifeFront" },
	{ 1440937123, "Start_KnifeLeft" },
	{ -1202459841, "Start_KnifeRight" },
	{ 2066460486, "Started" },
	{ 1424871421, "StateEntered" },
	{ -1051489536, "StateExitedOrDisabled" },
	{ 457748702, "StateOut" },
	{ -1410942516, "StateOutSent" },
	{ -1938540444, "StealthKill" },
	{ 1546520778, "StepCounter" },
	{ 426031496, "Stop" },
	{ 704810564, "StopEventEnded" },
	{ 1478187868, "StopSurrender" },
	{ 1723681392, "Stop_FWLong" },
	{ -1676074473, "Stop_FWShort" },
	{ -131563818, "Stop_KnifeBack" },
	{ 694376103, "Stop_KnifeFront" },
	{ -276735863, "Stop_KnifeLeft" },
	{ 1666335045, "Stop_KnifeRight" },
	{ 1763406192, "Stopped" },
	{ -1025481403, "StrayBullet" },
	{ -1395824486, "StrengthAtOrigin" },
	{ 501935096, "StuckItemPulledOut" },
	{ -1165336308, "SubSound" },
	{ 1750929202, "SubtitleChanged" },
	{ 1706378131, "SwipeActivated" },
	{ -817107053, "SwooshLong" },
	{ -1514969232, "SwooshShort" },
	{ 488567492, "SyncBar" },
	{ 2140711869, "SyncBeat" },
	{ 1742924931, "SyncEntry" },
	{ 1047013679, "SyncExit" },
	{ -2076085226, "SyncGrid" },
	{ -77167913, "SyncPoint" },
	{ 1001479005, "SyncUserCue" },
	{ -339413771, "TakeDamage" },
	{ -1599236937, "TakeHealthPack" },
	{ -1641100752, "TakeOutNonLethal" },
	{ 1627761601, "TakingNewDisguise" },
	{ 1646838764, "TargetAccidentKill" },
	{ -314056027, "TargetDied" },
	{ 213230084, "TargetKilled" },
	{ 2128429355, "TargetPacified" },
	{ -853629331, "TargetPosition" },
	{ 1242953680, "TearDownTestCase" },
	{ 1066095348, "TellActiveReceiverCount" },
	{ -1300901283, "TellReceiverCount" },
	{ -1682372359, "Text" },
	{ -798878922, "TextLocaleChanged" },
	{ -1854992692, "Then" },
	{ 231249837, "ThresholdPassed" },
	{ 1621108147, "ThroughWallKill" },
	{ -254758250, "ThrowActivated" },
	{ 498342933, "ThrowArcOff" },
	{ 45975906, "ThrowArcOn" },
	{ -303658819, "ThrowImpact" },
	{ -1769221630, "TimeMultiplierInBlendIn" },
	{ 1991314158, "TimeOut" },
	{ -1969265683, "TimeOutPending" },
	{ 559811855, "TimerEnded" },
	{ 1441702495, "TimerStarted" },
	{ -1208855358, "TimersUpdated" },
	{ 1026739556, "ToBlack" },
	{ -1612559760, "ToGame" },
	{ 575056061, "Toggle" },
	{ 758104917, "Toggled" },
	{ 847269377, "ToggledOff" },
	{ 1502812766, "ToggledOn" },
	{ -2087473529, "TotalCoverValue" },
	{ -914542825, "TotalSeconds" },
	{ -1760909726, "Tracked" },
	{ -180157682, "Transform" },
	{ 1270701846, "TrespassEscortAck" },
	{ 49199309, "TrespassEscortArrest" },
	{ 649692372, "TrespassEscortOk" },
	{ 1395243991, "TrespassEscortOutActive" },
	{ 1745607207, "TrespassEscortRequest" },
	{ -405604071, "TrespassEscortRequestRepeat" },
	{ -568017300, "TrespassEscortStandDown" },
	{ 623830022, "TrespassEscortStayClose" },
	{ -488520781, "Trespassing" },
	{ -398903749, "TrespassingAttentionMax" },
	{ -1154026753, "TrespassingAttentionMaxPan" },
	{ -707381567, "Trigger" },
	{ 1777100653, "TriggerBeforeRaycast" },
	{ 2074030651, "TriggerPressed" },
	{ -24344228, "TriggerRelease" },
	{ 249007644, "Triggered" },
	{ -1426741825, "TriggeredStealthSituation" },
	{ 1601692283, "TurnLightOn" },
	{ 1364874445, "TutorialEnd" },
	{ 209335169, "TutorialHintClosed" },
	{ -1511302850, "TutorialHintOpened" },
	{ -819608024, "TutorialStart" },
	{ -1152600142, "TypeRepositoryId" },
	{ 316088787, "UIAbortConversation" },
	{ -1677454559, "UIScrollOption" },
	{ 1441342114, "UISelectOption" },
	{ 450168469, "UISkipLine" },
	{ -1249961833, "Unclamped" },
	{ 1481929005, "Unequipped" },
	{ -1534646197, "Unmark_Local" },
	{ 356965440, "Unmark_Remote" },
	{ -1835169493, "UnnoticedKill" },
	{ 1122758015, "UnnoticedPacified" },
	{ -1495113914, "UnsetCurrentAmbience" },
	{ -562634082, "Untracked" },
	{ -703542574, "Up" },
	{ 1261253234, "UpToOrange" },
	{ 428401809, "UpToWhite" },
	{ 2069308737, "UpdatedPriority" },
	{ 800312554, "UseHealthStation" },
	{ -595822949, "VR_CrowdImpact_Bother" },
	{ -402125284, "VR_CrowdImpact_Kill" },
	{ 227216306, "VR_ItemDrop" },
	{ 33672954, "VR_ItemEquip" },
	{ 2021757299, "VR_ItemHolster" },
	{ 1738520523, "VR_ItemStuckInActor" },
	{ -764265622, "VR_ItemThrowDeadly" },
	{ -1403561483, "VR_ItemThrowNormal" },
	{ 808301223, "VR_NPCImpact_Bother" },
	{ 108932144, "VR_NPCImpact_Kill" },
	{ -1309663220, "VR_NPCImpact_Pacify" },
	{ 884454313, "VR_NPCImpact_Slap" },
	{ 1336182176, "VR_PrimeMelee" },
	{ -1943654082, "VR_SnapNeckKillEvent" },
	{ -1710618329, "VR_StartDraggingBody" },
	{ 1291932997, "VR_StartPrecisionAim" },
	{ 439972190, "VR_StartSilentTakedown" },
	{ -429132175, "VR_StartSnapNeck" },
	{ -1245904875, "VR_StartThreateningHandPose" },
	{ 499376918, "VR_StopDraggingBody" },
	{ -892813452, "VR_StopPrecisionAim" },
	{ -1665402301, "VR_StopSilentTakedown" },
	{ -582766038, "VR_StopSnapNeck" },
	{ -1728212417, "VR_StopThreateningHandPose" },
	{ 1894287286, "VR_StuckItemPulledOut" },
	{ -1464759458, "VR_UnprimeMelee" },
	{ -588832793, "VR_UpdateDragBodyForce" },
	{ -1881262729, "VR_UpdateSilentTakedown" },
	{ -592021712, "Value" },
	{ 554657752, "ValueChanged" },
	{ 701129125, "Vector2" },
	{ 1590513971, "Vector3" },
	{ -2024537553, "VectorMagnitude" },
	{ -1607050401, "VectorValue" },
	{ -1964776811, "VentEnter" },
	{ 70687331, "VentExit" },
	{ 580178702, "VentPeekStart" },
	{ -383612090, "VentPeekStop" },
	{ 717110842, "VisiblyArmed" },
	{ 655174618, "W" },
	{ 845057677, "Warn1" },
	{ -1420304585, "Warn2" },
	{ -273817656, "WarnOffPath" },
	{ -345710127, "WarnStopped" },
	{ -1035962704, "WarzoneBegin" },
	{ 1101493748, "WaypointActFinished" },
	{ -302761652, "WaypointReached" },
	{ 1855955664, "Weapon" },
	{ -1362076449, "WeaponAimStart" },
	{ 2127669528, "WeaponAimStop" },
	{ 1343552391, "WeaponEquip" },
	{ -2026016605, "WeaponEquipAssaultRifle" },
	{ -694644666, "WeaponEquipDualPistols" },
	{ 2046825726, "WeaponEquipIllegal" },
	{ -778681208, "WeaponEquipLegal" },
	{ -49021063, "WeaponEquipMelee" },
	{ 1301965115, "WeaponEquipShotgun" },
	{ 1146775227, "WeaponEquipSinglePistol" },
	{ 675988200, "WeaponEquipSniperRifle" },
	{ 1643955720, "WeaponEquipSuspicious" },
	{ -267556161, "WeaponEquipped" },
	{ 1486310636, "WeaponFire" },
	{ 534685362, "WeaponFireEmpty" },
	{ -1968477833, "WeaponFireWhileCrippled" },
	{ -15234501, "WeaponPlayerEquipped" },
	{ -424863856, "WeaponPlayerUnEquipped" },
	{ -380837929, "WeaponPrecisionAim" },
	{ -1222848155, "WeaponPrecisionAimComplete" },
	{ 578987726, "WeaponPrecisionAimReset" },
	{ 447155298, "WeaponReload" },
	{ 1426652340, "WeaponScroll" },
	{ -173047304, "WeaponSilencersEquip" },
	{ -2048813032, "WeaponSilencersUnequip" },
	{ -1369784344, "WeaponStartReload" },
	{ 635093058, "WeaponSwap" },
	{ 654786286, "WeaponSwapped" },
	{ 1549266876, "WeaponUnEquip" },
	{ 497432826, "WeaponUnEquipIllegal" },
	{ 108360002, "WeaponUnEquipLegal" },
	{ 1618019264, "WeaponUnEquipSuspicious" },
	{ 424191933, "WeaponUnEquipped" },
	{ 6377591, "Weight" },
	{ 1350067353, "WentAboveMax" },
	{ 908688100, "WentBelowMin" },
	{ -187877283, "WentIntoRange" },
	{ 445890690, "WireDetach" },
	{ 155523603, "WithinProximityChanged" },
	{ -538528601, "WithinThreshold" },
	{ -1758920068, "WorldPosition" },
	{ 1979450136, "Wounded" },
	{ -1213057461, "X" },
	{ -1061878051, "Y" },
	{ 1505515367, "Z" },
	{ 1033081092, "ZoomMapIn" },
	{ 797030920, "ZoomMapOut" },
	{ -273794410, "nAcknowledge" },
	{ -1061239543, "reportSetpieceUsed" },
};

bool TryGetPinName(int32_t p_PinId, ZString& p_Name)
{
	auto it = g_PinRegistry.find(p_PinId);

	if (it == g_PinRegistry.end())
		return false;

	p_Name = it->second;
	return true;
}


DECLARE_ZHM_PLUGIN(CodeGen);
